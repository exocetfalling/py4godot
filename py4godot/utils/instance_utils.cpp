/* Generated by Cython 3.0.11 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "py4godot/core/variant4/variant_utils.h",
            "py4godot/cppclasses/AESContext/AESContext.h",
            "py4godot/cppclasses/AStar2D/AStar2D.h",
            "py4godot/cppclasses/AStar3D/AStar3D.h",
            "py4godot/cppclasses/AStarGrid2D/AStarGrid2D.h",
            "py4godot/cppclasses/AcceptDialog/AcceptDialog.h",
            "py4godot/cppclasses/AnimatableBody2D/AnimatableBody2D.h",
            "py4godot/cppclasses/AnimatableBody3D/AnimatableBody3D.h",
            "py4godot/cppclasses/AnimatedSprite2D/AnimatedSprite2D.h",
            "py4godot/cppclasses/AnimatedSprite3D/AnimatedSprite3D.h",
            "py4godot/cppclasses/AnimatedTexture/AnimatedTexture.h",
            "py4godot/cppclasses/Animation/Animation.h",
            "py4godot/cppclasses/AnimationLibrary/AnimationLibrary.h",
            "py4godot/cppclasses/AnimationMixer/AnimationMixer.h",
            "py4godot/cppclasses/AnimationNode/AnimationNode.h",
            "py4godot/cppclasses/AnimationNodeAdd2/AnimationNodeAdd2.h",
            "py4godot/cppclasses/AnimationNodeAdd3/AnimationNodeAdd3.h",
            "py4godot/cppclasses/AnimationNodeAnimation/AnimationNodeAnimation.h",
            "py4godot/cppclasses/AnimationNodeBlend2/AnimationNodeBlend2.h",
            "py4godot/cppclasses/AnimationNodeBlend3/AnimationNodeBlend3.h",
            "py4godot/cppclasses/AnimationNodeBlendSpace1D/AnimationNodeBlendSpace1D.h",
            "py4godot/cppclasses/AnimationNodeBlendSpace2D/AnimationNodeBlendSpace2D.h",
            "py4godot/cppclasses/AnimationNodeBlendTree/AnimationNodeBlendTree.h",
            "py4godot/cppclasses/AnimationNodeOneShot/AnimationNodeOneShot.h",
            "py4godot/cppclasses/AnimationNodeOutput/AnimationNodeOutput.h",
            "py4godot/cppclasses/AnimationNodeStateMachine/AnimationNodeStateMachine.h",
            "py4godot/cppclasses/AnimationNodeStateMachinePlayback/AnimationNodeStateMachinePlayback.h",
            "py4godot/cppclasses/AnimationNodeStateMachineTransition/AnimationNodeStateMachineTransition.h",
            "py4godot/cppclasses/AnimationNodeSub2/AnimationNodeSub2.h",
            "py4godot/cppclasses/AnimationNodeSync/AnimationNodeSync.h",
            "py4godot/cppclasses/AnimationNodeTimeScale/AnimationNodeTimeScale.h",
            "py4godot/cppclasses/AnimationNodeTimeSeek/AnimationNodeTimeSeek.h",
            "py4godot/cppclasses/AnimationNodeTransition/AnimationNodeTransition.h",
            "py4godot/cppclasses/AnimationPlayer/AnimationPlayer.h",
            "py4godot/cppclasses/AnimationRootNode/AnimationRootNode.h",
            "py4godot/cppclasses/AnimationTree/AnimationTree.h",
            "py4godot/cppclasses/Area2D/Area2D.h",
            "py4godot/cppclasses/Area3D/Area3D.h",
            "py4godot/cppclasses/ArrayMesh/ArrayMesh.h",
            "py4godot/cppclasses/ArrayOccluder3D/ArrayOccluder3D.h",
            "py4godot/cppclasses/AspectRatioContainer/AspectRatioContainer.h",
            "py4godot/cppclasses/AtlasTexture/AtlasTexture.h",
            "py4godot/cppclasses/AudioBusLayout/AudioBusLayout.h",
            "py4godot/cppclasses/AudioEffect/AudioEffect.h",
            "py4godot/cppclasses/AudioEffectAmplify/AudioEffectAmplify.h",
            "py4godot/cppclasses/AudioEffectBandLimitFilter/AudioEffectBandLimitFilter.h",
            "py4godot/cppclasses/AudioEffectBandPassFilter/AudioEffectBandPassFilter.h",
            "py4godot/cppclasses/AudioEffectCapture/AudioEffectCapture.h",
            "py4godot/cppclasses/AudioEffectChorus/AudioEffectChorus.h",
            "py4godot/cppclasses/AudioEffectCompressor/AudioEffectCompressor.h",
            "py4godot/cppclasses/AudioEffectDelay/AudioEffectDelay.h",
            "py4godot/cppclasses/AudioEffectDistortion/AudioEffectDistortion.h",
            "py4godot/cppclasses/AudioEffectEQ/AudioEffectEQ.h",
            "py4godot/cppclasses/AudioEffectEQ10/AudioEffectEQ10.h",
            "py4godot/cppclasses/AudioEffectEQ21/AudioEffectEQ21.h",
            "py4godot/cppclasses/AudioEffectEQ6/AudioEffectEQ6.h",
            "py4godot/cppclasses/AudioEffectFilter/AudioEffectFilter.h",
            "py4godot/cppclasses/AudioEffectHardLimiter/AudioEffectHardLimiter.h",
            "py4godot/cppclasses/AudioEffectHighPassFilter/AudioEffectHighPassFilter.h",
            "py4godot/cppclasses/AudioEffectHighShelfFilter/AudioEffectHighShelfFilter.h",
            "py4godot/cppclasses/AudioEffectInstance/AudioEffectInstance.h",
            "py4godot/cppclasses/AudioEffectLimiter/AudioEffectLimiter.h",
            "py4godot/cppclasses/AudioEffectLowPassFilter/AudioEffectLowPassFilter.h",
            "py4godot/cppclasses/AudioEffectLowShelfFilter/AudioEffectLowShelfFilter.h",
            "py4godot/cppclasses/AudioEffectNotchFilter/AudioEffectNotchFilter.h",
            "py4godot/cppclasses/AudioEffectPanner/AudioEffectPanner.h",
            "py4godot/cppclasses/AudioEffectPhaser/AudioEffectPhaser.h",
            "py4godot/cppclasses/AudioEffectPitchShift/AudioEffectPitchShift.h",
            "py4godot/cppclasses/AudioEffectRecord/AudioEffectRecord.h",
            "py4godot/cppclasses/AudioEffectReverb/AudioEffectReverb.h",
            "py4godot/cppclasses/AudioEffectSpectrumAnalyzer/AudioEffectSpectrumAnalyzer.h",
            "py4godot/cppclasses/AudioEffectSpectrumAnalyzerInstance/AudioEffectSpectrumAnalyzerInstance.h",
            "py4godot/cppclasses/AudioEffectStereoEnhance/AudioEffectStereoEnhance.h",
            "py4godot/cppclasses/AudioListener2D/AudioListener2D.h",
            "py4godot/cppclasses/AudioListener3D/AudioListener3D.h",
            "py4godot/cppclasses/AudioSample/AudioSample.h",
            "py4godot/cppclasses/AudioSamplePlayback/AudioSamplePlayback.h",
            "py4godot/cppclasses/AudioServer/AudioServer.h",
            "py4godot/cppclasses/AudioStream/AudioStream.h",
            "py4godot/cppclasses/AudioStreamGenerator/AudioStreamGenerator.h",
            "py4godot/cppclasses/AudioStreamGeneratorPlayback/AudioStreamGeneratorPlayback.h",
            "py4godot/cppclasses/AudioStreamInteractive/AudioStreamInteractive.h",
            "py4godot/cppclasses/AudioStreamMP3/AudioStreamMP3.h",
            "py4godot/cppclasses/AudioStreamMicrophone/AudioStreamMicrophone.h",
            "py4godot/cppclasses/AudioStreamOggVorbis/AudioStreamOggVorbis.h",
            "py4godot/cppclasses/AudioStreamPlayback/AudioStreamPlayback.h",
            "py4godot/cppclasses/AudioStreamPlaybackInteractive/AudioStreamPlaybackInteractive.h",
            "py4godot/cppclasses/AudioStreamPlaybackOggVorbis/AudioStreamPlaybackOggVorbis.h",
            "py4godot/cppclasses/AudioStreamPlaybackPlaylist/AudioStreamPlaybackPlaylist.h",
            "py4godot/cppclasses/AudioStreamPlaybackPolyphonic/AudioStreamPlaybackPolyphonic.h",
            "py4godot/cppclasses/AudioStreamPlaybackResampled/AudioStreamPlaybackResampled.h",
            "py4godot/cppclasses/AudioStreamPlaybackSynchronized/AudioStreamPlaybackSynchronized.h",
            "py4godot/cppclasses/AudioStreamPlayer/AudioStreamPlayer.h",
            "py4godot/cppclasses/AudioStreamPlayer2D/AudioStreamPlayer2D.h",
            "py4godot/cppclasses/AudioStreamPlayer3D/AudioStreamPlayer3D.h",
            "py4godot/cppclasses/AudioStreamPlaylist/AudioStreamPlaylist.h",
            "py4godot/cppclasses/AudioStreamPolyphonic/AudioStreamPolyphonic.h",
            "py4godot/cppclasses/AudioStreamRandomizer/AudioStreamRandomizer.h",
            "py4godot/cppclasses/AudioStreamSynchronized/AudioStreamSynchronized.h",
            "py4godot/cppclasses/AudioStreamWAV/AudioStreamWAV.h",
            "py4godot/cppclasses/BackBufferCopy/BackBufferCopy.h",
            "py4godot/cppclasses/BaseButton/BaseButton.h",
            "py4godot/cppclasses/BaseMaterial3D/BaseMaterial3D.h",
            "py4godot/cppclasses/BitMap/BitMap.h",
            "py4godot/cppclasses/Bone2D/Bone2D.h",
            "py4godot/cppclasses/BoneAttachment3D/BoneAttachment3D.h",
            "py4godot/cppclasses/BoneMap/BoneMap.h",
            "py4godot/cppclasses/BoxContainer/BoxContainer.h",
            "py4godot/cppclasses/BoxMesh/BoxMesh.h",
            "py4godot/cppclasses/BoxOccluder3D/BoxOccluder3D.h",
            "py4godot/cppclasses/BoxShape3D/BoxShape3D.h",
            "py4godot/cppclasses/Button/Button.h",
            "py4godot/cppclasses/ButtonGroup/ButtonGroup.h",
            "py4godot/cppclasses/CPUParticles2D/CPUParticles2D.h",
            "py4godot/cppclasses/CPUParticles3D/CPUParticles3D.h",
            "py4godot/cppclasses/CSGBox3D/CSGBox3D.h",
            "py4godot/cppclasses/CSGCombiner3D/CSGCombiner3D.h",
            "py4godot/cppclasses/CSGCylinder3D/CSGCylinder3D.h",
            "py4godot/cppclasses/CSGMesh3D/CSGMesh3D.h",
            "py4godot/cppclasses/CSGPolygon3D/CSGPolygon3D.h",
            "py4godot/cppclasses/CSGPrimitive3D/CSGPrimitive3D.h",
            "py4godot/cppclasses/CSGShape3D/CSGShape3D.h",
            "py4godot/cppclasses/CSGSphere3D/CSGSphere3D.h",
            "py4godot/cppclasses/CSGTorus3D/CSGTorus3D.h",
            "py4godot/cppclasses/CallbackTweener/CallbackTweener.h",
            "py4godot/cppclasses/Camera2D/Camera2D.h",
            "py4godot/cppclasses/Camera3D/Camera3D.h",
            "py4godot/cppclasses/CameraAttributes/CameraAttributes.h",
            "py4godot/cppclasses/CameraAttributesPhysical/CameraAttributesPhysical.h",
            "py4godot/cppclasses/CameraAttributesPractical/CameraAttributesPractical.h",
            "py4godot/cppclasses/CameraFeed/CameraFeed.h",
            "py4godot/cppclasses/CameraServer/CameraServer.h",
            "py4godot/cppclasses/CameraTexture/CameraTexture.h",
            "py4godot/cppclasses/CanvasGroup/CanvasGroup.h",
            "py4godot/cppclasses/CanvasItem/CanvasItem.h",
            "py4godot/cppclasses/CanvasItemMaterial/CanvasItemMaterial.h",
            "py4godot/cppclasses/CanvasLayer/CanvasLayer.h",
            "py4godot/cppclasses/CanvasModulate/CanvasModulate.h",
            "py4godot/cppclasses/CanvasTexture/CanvasTexture.h",
            "py4godot/cppclasses/CapsuleMesh/CapsuleMesh.h",
            "py4godot/cppclasses/CapsuleShape2D/CapsuleShape2D.h",
            "py4godot/cppclasses/CapsuleShape3D/CapsuleShape3D.h",
            "py4godot/cppclasses/CenterContainer/CenterContainer.h",
            "py4godot/cppclasses/CharFXTransform/CharFXTransform.h",
            "py4godot/cppclasses/CharacterBody2D/CharacterBody2D.h",
            "py4godot/cppclasses/CharacterBody3D/CharacterBody3D.h",
            "py4godot/cppclasses/CheckBox/CheckBox.h",
            "py4godot/cppclasses/CheckButton/CheckButton.h",
            "py4godot/cppclasses/CircleShape2D/CircleShape2D.h",
            "py4godot/cppclasses/ClassDB/ClassDB.h",
            "py4godot/cppclasses/CodeEdit/CodeEdit.h",
            "py4godot/cppclasses/CodeHighlighter/CodeHighlighter.h",
            "py4godot/cppclasses/CollisionObject2D/CollisionObject2D.h",
            "py4godot/cppclasses/CollisionObject3D/CollisionObject3D.h",
            "py4godot/cppclasses/CollisionPolygon2D/CollisionPolygon2D.h",
            "py4godot/cppclasses/CollisionPolygon3D/CollisionPolygon3D.h",
            "py4godot/cppclasses/CollisionShape2D/CollisionShape2D.h",
            "py4godot/cppclasses/CollisionShape3D/CollisionShape3D.h",
            "py4godot/cppclasses/ColorPicker/ColorPicker.h",
            "py4godot/cppclasses/ColorPickerButton/ColorPickerButton.h",
            "py4godot/cppclasses/ColorRect/ColorRect.h",
            "py4godot/cppclasses/Compositor/Compositor.h",
            "py4godot/cppclasses/CompositorEffect/CompositorEffect.h",
            "py4godot/cppclasses/CompressedCubemap/CompressedCubemap.h",
            "py4godot/cppclasses/CompressedCubemapArray/CompressedCubemapArray.h",
            "py4godot/cppclasses/CompressedTexture2D/CompressedTexture2D.h",
            "py4godot/cppclasses/CompressedTexture2DArray/CompressedTexture2DArray.h",
            "py4godot/cppclasses/CompressedTexture3D/CompressedTexture3D.h",
            "py4godot/cppclasses/CompressedTextureLayered/CompressedTextureLayered.h",
            "py4godot/cppclasses/ConcavePolygonShape2D/ConcavePolygonShape2D.h",
            "py4godot/cppclasses/ConcavePolygonShape3D/ConcavePolygonShape3D.h",
            "py4godot/cppclasses/ConeTwistJoint3D/ConeTwistJoint3D.h",
            "py4godot/cppclasses/ConfigFile/ConfigFile.h",
            "py4godot/cppclasses/ConfirmationDialog/ConfirmationDialog.h",
            "py4godot/cppclasses/Container/Container.h",
            "py4godot/cppclasses/Control/Control.h",
            "py4godot/cppclasses/ConvexPolygonShape2D/ConvexPolygonShape2D.h",
            "py4godot/cppclasses/ConvexPolygonShape3D/ConvexPolygonShape3D.h",
            "py4godot/cppclasses/Crypto/Crypto.h",
            "py4godot/cppclasses/CryptoKey/CryptoKey.h",
            "py4godot/cppclasses/Cubemap/Cubemap.h",
            "py4godot/cppclasses/CubemapArray/CubemapArray.h",
            "py4godot/cppclasses/Curve/Curve.h",
            "py4godot/cppclasses/Curve2D/Curve2D.h",
            "py4godot/cppclasses/Curve3D/Curve3D.h",
            "py4godot/cppclasses/CurveTexture/CurveTexture.h",
            "py4godot/cppclasses/CurveXYZTexture/CurveXYZTexture.h",
            "py4godot/cppclasses/CylinderMesh/CylinderMesh.h",
            "py4godot/cppclasses/CylinderShape3D/CylinderShape3D.h",
            "py4godot/cppclasses/DTLSServer/DTLSServer.h",
            "py4godot/cppclasses/DampedSpringJoint2D/DampedSpringJoint2D.h",
            "py4godot/cppclasses/Decal/Decal.h",
            "py4godot/cppclasses/DirAccess/DirAccess.h",
            "py4godot/cppclasses/DirectionalLight2D/DirectionalLight2D.h",
            "py4godot/cppclasses/DirectionalLight3D/DirectionalLight3D.h",
            "py4godot/cppclasses/DisplayServer/DisplayServer.h",
            "py4godot/cppclasses/ENetConnection/ENetConnection.h",
            "py4godot/cppclasses/ENetMultiplayerPeer/ENetMultiplayerPeer.h",
            "py4godot/cppclasses/ENetPacketPeer/ENetPacketPeer.h",
            "py4godot/cppclasses/EditorCommandPalette/EditorCommandPalette.h",
            "py4godot/cppclasses/EditorDebuggerPlugin/EditorDebuggerPlugin.h",
            "py4godot/cppclasses/EditorDebuggerSession/EditorDebuggerSession.h",
            "py4godot/cppclasses/EditorExportPlatform/EditorExportPlatform.h",
            "py4godot/cppclasses/EditorExportPlatformAndroid/EditorExportPlatformAndroid.h",
            "py4godot/cppclasses/EditorExportPlatformIOS/EditorExportPlatformIOS.h",
            "py4godot/cppclasses/EditorExportPlatformLinuxBSD/EditorExportPlatformLinuxBSD.h",
            "py4godot/cppclasses/EditorExportPlatformMacOS/EditorExportPlatformMacOS.h",
            "py4godot/cppclasses/EditorExportPlatformPC/EditorExportPlatformPC.h",
            "py4godot/cppclasses/EditorExportPlatformWeb/EditorExportPlatformWeb.h",
            "py4godot/cppclasses/EditorExportPlatformWindows/EditorExportPlatformWindows.h",
            "py4godot/cppclasses/EditorExportPlugin/EditorExportPlugin.h",
            "py4godot/cppclasses/EditorFeatureProfile/EditorFeatureProfile.h",
            "py4godot/cppclasses/EditorFileDialog/EditorFileDialog.h",
            "py4godot/cppclasses/EditorFileSystem/EditorFileSystem.h",
            "py4godot/cppclasses/EditorFileSystemDirectory/EditorFileSystemDirectory.h",
            "py4godot/cppclasses/EditorFileSystemImportFormatSupportQuery/EditorFileSystemImportFormatSupportQuery.h",
            "py4godot/cppclasses/EditorImportPlugin/EditorImportPlugin.h",
            "py4godot/cppclasses/EditorInspector/EditorInspector.h",
            "py4godot/cppclasses/EditorInspectorPlugin/EditorInspectorPlugin.h",
            "py4godot/cppclasses/EditorInterface/EditorInterface.h",
            "py4godot/cppclasses/EditorNode3DGizmo/EditorNode3DGizmo.h",
            "py4godot/cppclasses/EditorNode3DGizmoPlugin/EditorNode3DGizmoPlugin.h",
            "py4godot/cppclasses/EditorPaths/EditorPaths.h",
            "py4godot/cppclasses/EditorPlugin/EditorPlugin.h",
            "py4godot/cppclasses/EditorProperty/EditorProperty.h",
            "py4godot/cppclasses/EditorResourceConversionPlugin/EditorResourceConversionPlugin.h",
            "py4godot/cppclasses/EditorResourcePicker/EditorResourcePicker.h",
            "py4godot/cppclasses/EditorResourcePreview/EditorResourcePreview.h",
            "py4godot/cppclasses/EditorResourcePreviewGenerator/EditorResourcePreviewGenerator.h",
            "py4godot/cppclasses/EditorResourceTooltipPlugin/EditorResourceTooltipPlugin.h",
            "py4godot/cppclasses/EditorSceneFormatImporter/EditorSceneFormatImporter.h",
            "py4godot/cppclasses/EditorSceneFormatImporterBlend/EditorSceneFormatImporterBlend.h",
            "py4godot/cppclasses/EditorSceneFormatImporterFBX2GLTF/EditorSceneFormatImporterFBX2GLTF.h",
            "py4godot/cppclasses/EditorSceneFormatImporterGLTF/EditorSceneFormatImporterGLTF.h",
            "py4godot/cppclasses/EditorSceneFormatImporterUFBX/EditorSceneFormatImporterUFBX.h",
            "py4godot/cppclasses/EditorScenePostImport/EditorScenePostImport.h",
            "py4godot/cppclasses/EditorScenePostImportPlugin/EditorScenePostImportPlugin.h",
            "py4godot/cppclasses/EditorScript/EditorScript.h",
            "py4godot/cppclasses/EditorScriptPicker/EditorScriptPicker.h",
            "py4godot/cppclasses/EditorSelection/EditorSelection.h",
            "py4godot/cppclasses/EditorSettings/EditorSettings.h",
            "py4godot/cppclasses/EditorSpinSlider/EditorSpinSlider.h",
            "py4godot/cppclasses/EditorSyntaxHighlighter/EditorSyntaxHighlighter.h",
            "py4godot/cppclasses/EditorTranslationParserPlugin/EditorTranslationParserPlugin.h",
            "py4godot/cppclasses/EditorUndoRedoManager/EditorUndoRedoManager.h",
            "py4godot/cppclasses/EditorVCSInterface/EditorVCSInterface.h",
            "py4godot/cppclasses/EncodedObjectAsID/EncodedObjectAsID.h",
            "py4godot/cppclasses/Engine/Engine.h",
            "py4godot/cppclasses/EngineDebugger/EngineDebugger.h",
            "py4godot/cppclasses/EngineProfiler/EngineProfiler.h",
            "py4godot/cppclasses/Environment/Environment.h",
            "py4godot/cppclasses/Expression/Expression.h",
            "py4godot/cppclasses/FBXDocument/FBXDocument.h",
            "py4godot/cppclasses/FBXState/FBXState.h",
            "py4godot/cppclasses/FastNoiseLite/FastNoiseLite.h",
            "py4godot/cppclasses/FileAccess/FileAccess.h",
            "py4godot/cppclasses/FileDialog/FileDialog.h",
            "py4godot/cppclasses/FileSystemDock/FileSystemDock.h",
            "py4godot/cppclasses/FlowContainer/FlowContainer.h",
            "py4godot/cppclasses/FogMaterial/FogMaterial.h",
            "py4godot/cppclasses/FogVolume/FogVolume.h",
            "py4godot/cppclasses/Font/Font.h",
            "py4godot/cppclasses/FontFile/FontFile.h",
            "py4godot/cppclasses/FontVariation/FontVariation.h",
            "py4godot/cppclasses/FramebufferCacheRD/FramebufferCacheRD.h",
            "py4godot/cppclasses/GDExtension/GDExtension.h",
            "py4godot/cppclasses/GDExtensionManager/GDExtensionManager.h",
            "py4godot/cppclasses/GDScript/GDScript.h",
            "py4godot/cppclasses/GLTFAccessor/GLTFAccessor.h",
            "py4godot/cppclasses/GLTFAnimation/GLTFAnimation.h",
            "py4godot/cppclasses/GLTFBufferView/GLTFBufferView.h",
            "py4godot/cppclasses/GLTFCamera/GLTFCamera.h",
            "py4godot/cppclasses/GLTFDocument/GLTFDocument.h",
            "py4godot/cppclasses/GLTFDocumentExtension/GLTFDocumentExtension.h",
            "py4godot/cppclasses/GLTFDocumentExtensionConvertImporterMesh/GLTFDocumentExtensionConvertImporterMesh.h",
            "py4godot/cppclasses/GLTFLight/GLTFLight.h",
            "py4godot/cppclasses/GLTFMesh/GLTFMesh.h",
            "py4godot/cppclasses/GLTFNode/GLTFNode.h",
            "py4godot/cppclasses/GLTFPhysicsBody/GLTFPhysicsBody.h",
            "py4godot/cppclasses/GLTFPhysicsShape/GLTFPhysicsShape.h",
            "py4godot/cppclasses/GLTFSkeleton/GLTFSkeleton.h",
            "py4godot/cppclasses/GLTFSkin/GLTFSkin.h",
            "py4godot/cppclasses/GLTFSpecGloss/GLTFSpecGloss.h",
            "py4godot/cppclasses/GLTFState/GLTFState.h",
            "py4godot/cppclasses/GLTFTexture/GLTFTexture.h",
            "py4godot/cppclasses/GLTFTextureSampler/GLTFTextureSampler.h",
            "py4godot/cppclasses/GPUParticles2D/GPUParticles2D.h",
            "py4godot/cppclasses/GPUParticles3D/GPUParticles3D.h",
            "py4godot/cppclasses/GPUParticlesAttractor3D/GPUParticlesAttractor3D.h",
            "py4godot/cppclasses/GPUParticlesAttractorBox3D/GPUParticlesAttractorBox3D.h",
            "py4godot/cppclasses/GPUParticlesAttractorSphere3D/GPUParticlesAttractorSphere3D.h",
            "py4godot/cppclasses/GPUParticlesAttractorVectorField3D/GPUParticlesAttractorVectorField3D.h",
            "py4godot/cppclasses/GPUParticlesCollision3D/GPUParticlesCollision3D.h",
            "py4godot/cppclasses/GPUParticlesCollisionBox3D/GPUParticlesCollisionBox3D.h",
            "py4godot/cppclasses/GPUParticlesCollisionHeightField3D/GPUParticlesCollisionHeightField3D.h",
            "py4godot/cppclasses/GPUParticlesCollisionSDF3D/GPUParticlesCollisionSDF3D.h",
            "py4godot/cppclasses/GPUParticlesCollisionSphere3D/GPUParticlesCollisionSphere3D.h",
            "py4godot/cppclasses/Generic6DOFJoint3D/Generic6DOFJoint3D.h",
            "py4godot/cppclasses/Geometry2D/Geometry2D.h",
            "py4godot/cppclasses/Geometry3D/Geometry3D.h",
            "py4godot/cppclasses/GeometryInstance3D/GeometryInstance3D.h",
            "py4godot/cppclasses/Gradient/Gradient.h",
            "py4godot/cppclasses/GradientTexture1D/GradientTexture1D.h",
            "py4godot/cppclasses/GradientTexture2D/GradientTexture2D.h",
            "py4godot/cppclasses/GraphEdit/GraphEdit.h",
            "py4godot/cppclasses/GraphElement/GraphElement.h",
            "py4godot/cppclasses/GraphFrame/GraphFrame.h",
            "py4godot/cppclasses/GraphNode/GraphNode.h",
            "py4godot/cppclasses/GridContainer/GridContainer.h",
            "py4godot/cppclasses/GridMap/GridMap.h",
            "py4godot/cppclasses/GrooveJoint2D/GrooveJoint2D.h",
            "py4godot/cppclasses/HBoxContainer/HBoxContainer.h",
            "py4godot/cppclasses/HFlowContainer/HFlowContainer.h",
            "py4godot/cppclasses/HMACContext/HMACContext.h",
            "py4godot/cppclasses/HScrollBar/HScrollBar.h",
            "py4godot/cppclasses/HSeparator/HSeparator.h",
            "py4godot/cppclasses/HSlider/HSlider.h",
            "py4godot/cppclasses/HSplitContainer/HSplitContainer.h",
            "py4godot/cppclasses/HTTPClient/HTTPClient.h",
            "py4godot/cppclasses/HTTPRequest/HTTPRequest.h",
            "py4godot/cppclasses/HashingContext/HashingContext.h",
            "py4godot/cppclasses/HeightMapShape3D/HeightMapShape3D.h",
            "py4godot/cppclasses/HingeJoint3D/HingeJoint3D.h",
            "py4godot/cppclasses/IP/IP.h",
            "py4godot/cppclasses/Image/Image.h",
            "py4godot/cppclasses/ImageFormatLoader/ImageFormatLoader.h",
            "py4godot/cppclasses/ImageFormatLoaderExtension/ImageFormatLoaderExtension.h",
            "py4godot/cppclasses/ImageTexture/ImageTexture.h",
            "py4godot/cppclasses/ImageTexture3D/ImageTexture3D.h",
            "py4godot/cppclasses/ImageTextureLayered/ImageTextureLayered.h",
            "py4godot/cppclasses/ImmediateMesh/ImmediateMesh.h",
            "py4godot/cppclasses/ImporterMesh/ImporterMesh.h",
            "py4godot/cppclasses/ImporterMeshInstance3D/ImporterMeshInstance3D.h",
            "py4godot/cppclasses/Input/Input.h",
            "py4godot/cppclasses/InputEvent/InputEvent.h",
            "py4godot/cppclasses/InputEventAction/InputEventAction.h",
            "py4godot/cppclasses/InputEventFromWindow/InputEventFromWindow.h",
            "py4godot/cppclasses/InputEventGesture/InputEventGesture.h",
            "py4godot/cppclasses/InputEventJoypadButton/InputEventJoypadButton.h",
            "py4godot/cppclasses/InputEventJoypadMotion/InputEventJoypadMotion.h",
            "py4godot/cppclasses/InputEventKey/InputEventKey.h",
            "py4godot/cppclasses/InputEventMIDI/InputEventMIDI.h",
            "py4godot/cppclasses/InputEventMagnifyGesture/InputEventMagnifyGesture.h",
            "py4godot/cppclasses/InputEventMouse/InputEventMouse.h",
            "py4godot/cppclasses/InputEventMouseButton/InputEventMouseButton.h",
            "py4godot/cppclasses/InputEventMouseMotion/InputEventMouseMotion.h",
            "py4godot/cppclasses/InputEventPanGesture/InputEventPanGesture.h",
            "py4godot/cppclasses/InputEventScreenDrag/InputEventScreenDrag.h",
            "py4godot/cppclasses/InputEventScreenTouch/InputEventScreenTouch.h",
            "py4godot/cppclasses/InputEventShortcut/InputEventShortcut.h",
            "py4godot/cppclasses/InputEventWithModifiers/InputEventWithModifiers.h",
            "py4godot/cppclasses/InputMap/InputMap.h",
            "py4godot/cppclasses/InstancePlaceholder/InstancePlaceholder.h",
            "py4godot/cppclasses/IntervalTweener/IntervalTweener.h",
            "py4godot/cppclasses/ItemList/ItemList.h",
            "py4godot/cppclasses/JNISingleton/JNISingleton.h",
            "py4godot/cppclasses/JSON/JSON.h",
            "py4godot/cppclasses/JSONRPC/JSONRPC.h",
            "py4godot/cppclasses/JavaClass/JavaClass.h",
            "py4godot/cppclasses/JavaClassWrapper/JavaClassWrapper.h",
            "py4godot/cppclasses/JavaScriptBridge/JavaScriptBridge.h",
            "py4godot/cppclasses/JavaScriptObject/JavaScriptObject.h",
            "py4godot/cppclasses/Joint2D/Joint2D.h",
            "py4godot/cppclasses/Joint3D/Joint3D.h",
            "py4godot/cppclasses/KinematicCollision2D/KinematicCollision2D.h",
            "py4godot/cppclasses/KinematicCollision3D/KinematicCollision3D.h",
            "py4godot/cppclasses/Label/Label.h",
            "py4godot/cppclasses/Label3D/Label3D.h",
            "py4godot/cppclasses/LabelSettings/LabelSettings.h",
            "py4godot/cppclasses/Light2D/Light2D.h",
            "py4godot/cppclasses/Light3D/Light3D.h",
            "py4godot/cppclasses/LightOccluder2D/LightOccluder2D.h",
            "py4godot/cppclasses/LightmapGI/LightmapGI.h",
            "py4godot/cppclasses/LightmapGIData/LightmapGIData.h",
            "py4godot/cppclasses/LightmapProbe/LightmapProbe.h",
            "py4godot/cppclasses/Lightmapper/Lightmapper.h",
            "py4godot/cppclasses/LightmapperRD/LightmapperRD.h",
            "py4godot/cppclasses/Line2D/Line2D.h",
            "py4godot/cppclasses/LineEdit/LineEdit.h",
            "py4godot/cppclasses/LinkButton/LinkButton.h",
            "py4godot/cppclasses/MainLoop/MainLoop.h",
            "py4godot/cppclasses/MarginContainer/MarginContainer.h",
            "py4godot/cppclasses/Marker2D/Marker2D.h",
            "py4godot/cppclasses/Marker3D/Marker3D.h",
            "py4godot/cppclasses/Marshalls/Marshalls.h",
            "py4godot/cppclasses/Material/Material.h",
            "py4godot/cppclasses/MenuBar/MenuBar.h",
            "py4godot/cppclasses/MenuButton/MenuButton.h",
            "py4godot/cppclasses/Mesh/Mesh.h",
            "py4godot/cppclasses/MeshConvexDecompositionSettings/MeshConvexDecompositionSettings.h",
            "py4godot/cppclasses/MeshDataTool/MeshDataTool.h",
            "py4godot/cppclasses/MeshInstance2D/MeshInstance2D.h",
            "py4godot/cppclasses/MeshInstance3D/MeshInstance3D.h",
            "py4godot/cppclasses/MeshLibrary/MeshLibrary.h",
            "py4godot/cppclasses/MeshTexture/MeshTexture.h",
            "py4godot/cppclasses/MethodTweener/MethodTweener.h",
            "py4godot/cppclasses/MissingNode/MissingNode.h",
            "py4godot/cppclasses/MissingResource/MissingResource.h",
            "py4godot/cppclasses/MobileVRInterface/MobileVRInterface.h",
            "py4godot/cppclasses/MovieWriter/MovieWriter.h",
            "py4godot/cppclasses/MultiMesh/MultiMesh.h",
            "py4godot/cppclasses/MultiMeshInstance2D/MultiMeshInstance2D.h",
            "py4godot/cppclasses/MultiMeshInstance3D/MultiMeshInstance3D.h",
            "py4godot/cppclasses/MultiplayerAPI/MultiplayerAPI.h",
            "py4godot/cppclasses/MultiplayerAPIExtension/MultiplayerAPIExtension.h",
            "py4godot/cppclasses/MultiplayerPeer/MultiplayerPeer.h",
            "py4godot/cppclasses/MultiplayerPeerExtension/MultiplayerPeerExtension.h",
            "py4godot/cppclasses/MultiplayerSpawner/MultiplayerSpawner.h",
            "py4godot/cppclasses/MultiplayerSynchronizer/MultiplayerSynchronizer.h",
            "py4godot/cppclasses/Mutex/Mutex.h",
            "py4godot/cppclasses/NativeMenu/NativeMenu.h",
            "py4godot/cppclasses/NavigationAgent2D/NavigationAgent2D.h",
            "py4godot/cppclasses/NavigationAgent3D/NavigationAgent3D.h",
            "py4godot/cppclasses/NavigationLink2D/NavigationLink2D.h",
            "py4godot/cppclasses/NavigationLink3D/NavigationLink3D.h",
            "py4godot/cppclasses/NavigationMesh/NavigationMesh.h",
            "py4godot/cppclasses/NavigationMeshGenerator/NavigationMeshGenerator.h",
            "py4godot/cppclasses/NavigationMeshSourceGeometryData2D/NavigationMeshSourceGeometryData2D.h",
            "py4godot/cppclasses/NavigationMeshSourceGeometryData3D/NavigationMeshSourceGeometryData3D.h",
            "py4godot/cppclasses/NavigationObstacle2D/NavigationObstacle2D.h",
            "py4godot/cppclasses/NavigationObstacle3D/NavigationObstacle3D.h",
            "py4godot/cppclasses/NavigationPathQueryParameters2D/NavigationPathQueryParameters2D.h",
            "py4godot/cppclasses/NavigationPathQueryParameters3D/NavigationPathQueryParameters3D.h",
            "py4godot/cppclasses/NavigationPathQueryResult2D/NavigationPathQueryResult2D.h",
            "py4godot/cppclasses/NavigationPathQueryResult3D/NavigationPathQueryResult3D.h",
            "py4godot/cppclasses/NavigationPolygon/NavigationPolygon.h",
            "py4godot/cppclasses/NavigationRegion2D/NavigationRegion2D.h",
            "py4godot/cppclasses/NavigationRegion3D/NavigationRegion3D.h",
            "py4godot/cppclasses/NavigationServer2D/NavigationServer2D.h",
            "py4godot/cppclasses/NavigationServer3D/NavigationServer3D.h",
            "py4godot/cppclasses/NinePatchRect/NinePatchRect.h",
            "py4godot/cppclasses/Node/Node.h",
            "py4godot/cppclasses/Node2D/Node2D.h",
            "py4godot/cppclasses/Node3D/Node3D.h",
            "py4godot/cppclasses/Node3DGizmo/Node3DGizmo.h",
            "py4godot/cppclasses/Noise/Noise.h",
            "py4godot/cppclasses/NoiseTexture2D/NoiseTexture2D.h",
            "py4godot/cppclasses/NoiseTexture3D/NoiseTexture3D.h",
            "py4godot/cppclasses/ORMMaterial3D/ORMMaterial3D.h",
            "py4godot/cppclasses/OS/OS.h",
            "py4godot/cppclasses/Object/Object.h",
            "py4godot/cppclasses/Occluder3D/Occluder3D.h",
            "py4godot/cppclasses/OccluderInstance3D/OccluderInstance3D.h",
            "py4godot/cppclasses/OccluderPolygon2D/OccluderPolygon2D.h",
            "py4godot/cppclasses/OfflineMultiplayerPeer/OfflineMultiplayerPeer.h",
            "py4godot/cppclasses/OggPacketSequence/OggPacketSequence.h",
            "py4godot/cppclasses/OggPacketSequencePlayback/OggPacketSequencePlayback.h",
            "py4godot/cppclasses/OmniLight3D/OmniLight3D.h",
            "py4godot/cppclasses/OpenXRAPIExtension/OpenXRAPIExtension.h",
            "py4godot/cppclasses/OpenXRAction/OpenXRAction.h",
            "py4godot/cppclasses/OpenXRActionMap/OpenXRActionMap.h",
            "py4godot/cppclasses/OpenXRActionSet/OpenXRActionSet.h",
            "py4godot/cppclasses/OpenXRCompositionLayer/OpenXRCompositionLayer.h",
            "py4godot/cppclasses/OpenXRCompositionLayerCylinder/OpenXRCompositionLayerCylinder.h",
            "py4godot/cppclasses/OpenXRCompositionLayerEquirect/OpenXRCompositionLayerEquirect.h",
            "py4godot/cppclasses/OpenXRCompositionLayerQuad/OpenXRCompositionLayerQuad.h",
            "py4godot/cppclasses/OpenXRExtensionWrapperExtension/OpenXRExtensionWrapperExtension.h",
            "py4godot/cppclasses/OpenXRHand/OpenXRHand.h",
            "py4godot/cppclasses/OpenXRIPBinding/OpenXRIPBinding.h",
            "py4godot/cppclasses/OpenXRInteractionProfile/OpenXRInteractionProfile.h",
            "py4godot/cppclasses/OpenXRInteractionProfileMetadata/OpenXRInteractionProfileMetadata.h",
            "py4godot/cppclasses/OpenXRInterface/OpenXRInterface.h",
            "py4godot/cppclasses/OptimizedTranslation/OptimizedTranslation.h",
            "py4godot/cppclasses/OptionButton/OptionButton.h",
            "py4godot/cppclasses/PCKPacker/PCKPacker.h",
            "py4godot/cppclasses/PackedDataContainer/PackedDataContainer.h",
            "py4godot/cppclasses/PackedDataContainerRef/PackedDataContainerRef.h",
            "py4godot/cppclasses/PackedScene/PackedScene.h",
            "py4godot/cppclasses/PacketPeer/PacketPeer.h",
            "py4godot/cppclasses/PacketPeerDTLS/PacketPeerDTLS.h",
            "py4godot/cppclasses/PacketPeerExtension/PacketPeerExtension.h",
            "py4godot/cppclasses/PacketPeerStream/PacketPeerStream.h",
            "py4godot/cppclasses/PacketPeerUDP/PacketPeerUDP.h",
            "py4godot/cppclasses/Panel/Panel.h",
            "py4godot/cppclasses/PanelContainer/PanelContainer.h",
            "py4godot/cppclasses/PanoramaSkyMaterial/PanoramaSkyMaterial.h",
            "py4godot/cppclasses/Parallax2D/Parallax2D.h",
            "py4godot/cppclasses/ParallaxBackground/ParallaxBackground.h",
            "py4godot/cppclasses/ParallaxLayer/ParallaxLayer.h",
            "py4godot/cppclasses/ParticleProcessMaterial/ParticleProcessMaterial.h",
            "py4godot/cppclasses/Path2D/Path2D.h",
            "py4godot/cppclasses/Path3D/Path3D.h",
            "py4godot/cppclasses/PathFollow2D/PathFollow2D.h",
            "py4godot/cppclasses/PathFollow3D/PathFollow3D.h",
            "py4godot/cppclasses/Performance/Performance.h",
            "py4godot/cppclasses/PhysicalBone2D/PhysicalBone2D.h",
            "py4godot/cppclasses/PhysicalBone3D/PhysicalBone3D.h",
            "py4godot/cppclasses/PhysicalBoneSimulator3D/PhysicalBoneSimulator3D.h",
            "py4godot/cppclasses/PhysicalSkyMaterial/PhysicalSkyMaterial.h",
            "py4godot/cppclasses/PhysicsBody2D/PhysicsBody2D.h",
            "py4godot/cppclasses/PhysicsBody3D/PhysicsBody3D.h",
            "py4godot/cppclasses/PhysicsDirectBodyState2D/PhysicsDirectBodyState2D.h",
            "py4godot/cppclasses/PhysicsDirectBodyState2DExtension/PhysicsDirectBodyState2DExtension.h",
            "py4godot/cppclasses/PhysicsDirectBodyState3D/PhysicsDirectBodyState3D.h",
            "py4godot/cppclasses/PhysicsDirectBodyState3DExtension/PhysicsDirectBodyState3DExtension.h",
            "py4godot/cppclasses/PhysicsDirectSpaceState2D/PhysicsDirectSpaceState2D.h",
            "py4godot/cppclasses/PhysicsDirectSpaceState2DExtension/PhysicsDirectSpaceState2DExtension.h",
            "py4godot/cppclasses/PhysicsDirectSpaceState3D/PhysicsDirectSpaceState3D.h",
            "py4godot/cppclasses/PhysicsDirectSpaceState3DExtension/PhysicsDirectSpaceState3DExtension.h",
            "py4godot/cppclasses/PhysicsMaterial/PhysicsMaterial.h",
            "py4godot/cppclasses/PhysicsPointQueryParameters2D/PhysicsPointQueryParameters2D.h",
            "py4godot/cppclasses/PhysicsPointQueryParameters3D/PhysicsPointQueryParameters3D.h",
            "py4godot/cppclasses/PhysicsRayQueryParameters2D/PhysicsRayQueryParameters2D.h",
            "py4godot/cppclasses/PhysicsRayQueryParameters3D/PhysicsRayQueryParameters3D.h",
            "py4godot/cppclasses/PhysicsServer2D/PhysicsServer2D.h",
            "py4godot/cppclasses/PhysicsServer2DExtension/PhysicsServer2DExtension.h",
            "py4godot/cppclasses/PhysicsServer2DManager/PhysicsServer2DManager.h",
            "py4godot/cppclasses/PhysicsServer3D/PhysicsServer3D.h",
            "py4godot/cppclasses/PhysicsServer3DExtension/PhysicsServer3DExtension.h",
            "py4godot/cppclasses/PhysicsServer3DManager/PhysicsServer3DManager.h",
            "py4godot/cppclasses/PhysicsServer3DRenderingServerHandler/PhysicsServer3DRenderingServerHandler.h",
            "py4godot/cppclasses/PhysicsShapeQueryParameters2D/PhysicsShapeQueryParameters2D.h",
            "py4godot/cppclasses/PhysicsShapeQueryParameters3D/PhysicsShapeQueryParameters3D.h",
            "py4godot/cppclasses/PhysicsTestMotionParameters2D/PhysicsTestMotionParameters2D.h",
            "py4godot/cppclasses/PhysicsTestMotionParameters3D/PhysicsTestMotionParameters3D.h",
            "py4godot/cppclasses/PhysicsTestMotionResult2D/PhysicsTestMotionResult2D.h",
            "py4godot/cppclasses/PhysicsTestMotionResult3D/PhysicsTestMotionResult3D.h",
            "py4godot/cppclasses/PinJoint2D/PinJoint2D.h",
            "py4godot/cppclasses/PinJoint3D/PinJoint3D.h",
            "py4godot/cppclasses/PlaceholderCubemap/PlaceholderCubemap.h",
            "py4godot/cppclasses/PlaceholderCubemapArray/PlaceholderCubemapArray.h",
            "py4godot/cppclasses/PlaceholderMaterial/PlaceholderMaterial.h",
            "py4godot/cppclasses/PlaceholderMesh/PlaceholderMesh.h",
            "py4godot/cppclasses/PlaceholderTexture2D/PlaceholderTexture2D.h",
            "py4godot/cppclasses/PlaceholderTexture2DArray/PlaceholderTexture2DArray.h",
            "py4godot/cppclasses/PlaceholderTexture3D/PlaceholderTexture3D.h",
            "py4godot/cppclasses/PlaceholderTextureLayered/PlaceholderTextureLayered.h",
            "py4godot/cppclasses/PlaneMesh/PlaneMesh.h",
            "py4godot/cppclasses/PointLight2D/PointLight2D.h",
            "py4godot/cppclasses/PointMesh/PointMesh.h",
            "py4godot/cppclasses/Polygon2D/Polygon2D.h",
            "py4godot/cppclasses/PolygonOccluder3D/PolygonOccluder3D.h",
            "py4godot/cppclasses/PolygonPathFinder/PolygonPathFinder.h",
            "py4godot/cppclasses/Popup/Popup.h",
            "py4godot/cppclasses/PopupMenu/PopupMenu.h",
            "py4godot/cppclasses/PopupPanel/PopupPanel.h",
            "py4godot/cppclasses/PortableCompressedTexture2D/PortableCompressedTexture2D.h",
            "py4godot/cppclasses/PrimitiveMesh/PrimitiveMesh.h",
            "py4godot/cppclasses/PrismMesh/PrismMesh.h",
            "py4godot/cppclasses/ProceduralSkyMaterial/ProceduralSkyMaterial.h",
            "py4godot/cppclasses/ProgressBar/ProgressBar.h",
            "py4godot/cppclasses/ProjectSettings/ProjectSettings.h",
            "py4godot/cppclasses/PropertyTweener/PropertyTweener.h",
            "py4godot/cppclasses/QuadMesh/QuadMesh.h",
            "py4godot/cppclasses/QuadOccluder3D/QuadOccluder3D.h",
            "py4godot/cppclasses/RDAttachmentFormat/RDAttachmentFormat.h",
            "py4godot/cppclasses/RDFramebufferPass/RDFramebufferPass.h",
            "py4godot/cppclasses/RDPipelineColorBlendState/RDPipelineColorBlendState.h",
            "py4godot/cppclasses/RDPipelineColorBlendStateAttachment/RDPipelineColorBlendStateAttachment.h",
            "py4godot/cppclasses/RDPipelineDepthStencilState/RDPipelineDepthStencilState.h",
            "py4godot/cppclasses/RDPipelineMultisampleState/RDPipelineMultisampleState.h",
            "py4godot/cppclasses/RDPipelineRasterizationState/RDPipelineRasterizationState.h",
            "py4godot/cppclasses/RDPipelineSpecializationConstant/RDPipelineSpecializationConstant.h",
            "py4godot/cppclasses/RDSamplerState/RDSamplerState.h",
            "py4godot/cppclasses/RDShaderFile/RDShaderFile.h",
            "py4godot/cppclasses/RDShaderSPIRV/RDShaderSPIRV.h",
            "py4godot/cppclasses/RDShaderSource/RDShaderSource.h",
            "py4godot/cppclasses/RDTextureFormat/RDTextureFormat.h",
            "py4godot/cppclasses/RDTextureView/RDTextureView.h",
            "py4godot/cppclasses/RDUniform/RDUniform.h",
            "py4godot/cppclasses/RDVertexAttribute/RDVertexAttribute.h",
            "py4godot/cppclasses/RandomNumberGenerator/RandomNumberGenerator.h",
            "py4godot/cppclasses/Range/Range.h",
            "py4godot/cppclasses/RayCast2D/RayCast2D.h",
            "py4godot/cppclasses/RayCast3D/RayCast3D.h",
            "py4godot/cppclasses/RectangleShape2D/RectangleShape2D.h",
            "py4godot/cppclasses/RefCounted/RefCounted.h",
            "py4godot/cppclasses/ReferenceRect/ReferenceRect.h",
            "py4godot/cppclasses/ReflectionProbe/ReflectionProbe.h",
            "py4godot/cppclasses/RegEx/RegEx.h",
            "py4godot/cppclasses/RegExMatch/RegExMatch.h",
            "py4godot/cppclasses/RemoteTransform2D/RemoteTransform2D.h",
            "py4godot/cppclasses/RemoteTransform3D/RemoteTransform3D.h",
            "py4godot/cppclasses/RenderData/RenderData.h",
            "py4godot/cppclasses/RenderDataExtension/RenderDataExtension.h",
            "py4godot/cppclasses/RenderDataRD/RenderDataRD.h",
            "py4godot/cppclasses/RenderSceneBuffers/RenderSceneBuffers.h",
            "py4godot/cppclasses/RenderSceneBuffersConfiguration/RenderSceneBuffersConfiguration.h",
            "py4godot/cppclasses/RenderSceneBuffersExtension/RenderSceneBuffersExtension.h",
            "py4godot/cppclasses/RenderSceneBuffersRD/RenderSceneBuffersRD.h",
            "py4godot/cppclasses/RenderSceneData/RenderSceneData.h",
            "py4godot/cppclasses/RenderSceneDataExtension/RenderSceneDataExtension.h",
            "py4godot/cppclasses/RenderSceneDataRD/RenderSceneDataRD.h",
            "py4godot/cppclasses/RenderingDevice/RenderingDevice.h",
            "py4godot/cppclasses/RenderingServer/RenderingServer.h",
            "py4godot/cppclasses/Resource/Resource.h",
            "py4godot/cppclasses/ResourceFormatLoader/ResourceFormatLoader.h",
            "py4godot/cppclasses/ResourceFormatSaver/ResourceFormatSaver.h",
            "py4godot/cppclasses/ResourceImporter/ResourceImporter.h",
            "py4godot/cppclasses/ResourceImporterBMFont/ResourceImporterBMFont.h",
            "py4godot/cppclasses/ResourceImporterBitMap/ResourceImporterBitMap.h",
            "py4godot/cppclasses/ResourceImporterCSVTranslation/ResourceImporterCSVTranslation.h",
            "py4godot/cppclasses/ResourceImporterDynamicFont/ResourceImporterDynamicFont.h",
            "py4godot/cppclasses/ResourceImporterImage/ResourceImporterImage.h",
            "py4godot/cppclasses/ResourceImporterImageFont/ResourceImporterImageFont.h",
            "py4godot/cppclasses/ResourceImporterLayeredTexture/ResourceImporterLayeredTexture.h",
            "py4godot/cppclasses/ResourceImporterMP3/ResourceImporterMP3.h",
            "py4godot/cppclasses/ResourceImporterOBJ/ResourceImporterOBJ.h",
            "py4godot/cppclasses/ResourceImporterOggVorbis/ResourceImporterOggVorbis.h",
            "py4godot/cppclasses/ResourceImporterScene/ResourceImporterScene.h",
            "py4godot/cppclasses/ResourceImporterShaderFile/ResourceImporterShaderFile.h",
            "py4godot/cppclasses/ResourceImporterTexture/ResourceImporterTexture.h",
            "py4godot/cppclasses/ResourceImporterTextureAtlas/ResourceImporterTextureAtlas.h",
            "py4godot/cppclasses/ResourceImporterWAV/ResourceImporterWAV.h",
            "py4godot/cppclasses/ResourceLoader/ResourceLoader.h",
            "py4godot/cppclasses/ResourcePreloader/ResourcePreloader.h",
            "py4godot/cppclasses/ResourceSaver/ResourceSaver.h",
            "py4godot/cppclasses/ResourceUID/ResourceUID.h",
            "py4godot/cppclasses/RibbonTrailMesh/RibbonTrailMesh.h",
            "py4godot/cppclasses/RichTextEffect/RichTextEffect.h",
            "py4godot/cppclasses/RichTextLabel/RichTextLabel.h",
            "py4godot/cppclasses/RigidBody2D/RigidBody2D.h",
            "py4godot/cppclasses/RigidBody3D/RigidBody3D.h",
            "py4godot/cppclasses/RootMotionView/RootMotionView.h",
            "py4godot/cppclasses/SceneMultiplayer/SceneMultiplayer.h",
            "py4godot/cppclasses/SceneReplicationConfig/SceneReplicationConfig.h",
            "py4godot/cppclasses/SceneState/SceneState.h",
            "py4godot/cppclasses/SceneTree/SceneTree.h",
            "py4godot/cppclasses/SceneTreeTimer/SceneTreeTimer.h",
            "py4godot/cppclasses/Script/Script.h",
            "py4godot/cppclasses/ScriptCreateDialog/ScriptCreateDialog.h",
            "py4godot/cppclasses/ScriptEditor/ScriptEditor.h",
            "py4godot/cppclasses/ScriptEditorBase/ScriptEditorBase.h",
            "py4godot/cppclasses/ScriptExtension/ScriptExtension.h",
            "py4godot/cppclasses/ScriptLanguage/ScriptLanguage.h",
            "py4godot/cppclasses/ScriptLanguageExtension/ScriptLanguageExtension.h",
            "py4godot/cppclasses/ScrollBar/ScrollBar.h",
            "py4godot/cppclasses/ScrollContainer/ScrollContainer.h",
            "py4godot/cppclasses/SegmentShape2D/SegmentShape2D.h",
            "py4godot/cppclasses/Semaphore/Semaphore.h",
            "py4godot/cppclasses/SeparationRayShape2D/SeparationRayShape2D.h",
            "py4godot/cppclasses/SeparationRayShape3D/SeparationRayShape3D.h",
            "py4godot/cppclasses/Separator/Separator.h",
            "py4godot/cppclasses/Shader/Shader.h",
            "py4godot/cppclasses/ShaderGlobalsOverride/ShaderGlobalsOverride.h",
            "py4godot/cppclasses/ShaderInclude/ShaderInclude.h",
            "py4godot/cppclasses/ShaderMaterial/ShaderMaterial.h",
            "py4godot/cppclasses/Shape2D/Shape2D.h",
            "py4godot/cppclasses/Shape3D/Shape3D.h",
            "py4godot/cppclasses/ShapeCast2D/ShapeCast2D.h",
            "py4godot/cppclasses/ShapeCast3D/ShapeCast3D.h",
            "py4godot/cppclasses/Shortcut/Shortcut.h",
            "py4godot/cppclasses/Skeleton2D/Skeleton2D.h",
            "py4godot/cppclasses/Skeleton3D/Skeleton3D.h",
            "py4godot/cppclasses/SkeletonIK3D/SkeletonIK3D.h",
            "py4godot/cppclasses/SkeletonModification2D/SkeletonModification2D.h",
            "py4godot/cppclasses/SkeletonModification2DCCDIK/SkeletonModification2DCCDIK.h",
            "py4godot/cppclasses/SkeletonModification2DFABRIK/SkeletonModification2DFABRIK.h",
            "py4godot/cppclasses/SkeletonModification2DJiggle/SkeletonModification2DJiggle.h",
            "py4godot/cppclasses/SkeletonModification2DLookAt/SkeletonModification2DLookAt.h",
            "py4godot/cppclasses/SkeletonModification2DPhysicalBones/SkeletonModification2DPhysicalBones.h",
            "py4godot/cppclasses/SkeletonModification2DStackHolder/SkeletonModification2DStackHolder.h",
            "py4godot/cppclasses/SkeletonModification2DTwoBoneIK/SkeletonModification2DTwoBoneIK.h",
            "py4godot/cppclasses/SkeletonModificationStack2D/SkeletonModificationStack2D.h",
            "py4godot/cppclasses/SkeletonModifier3D/SkeletonModifier3D.h",
            "py4godot/cppclasses/SkeletonProfile/SkeletonProfile.h",
            "py4godot/cppclasses/SkeletonProfileHumanoid/SkeletonProfileHumanoid.h",
            "py4godot/cppclasses/Skin/Skin.h",
            "py4godot/cppclasses/SkinReference/SkinReference.h",
            "py4godot/cppclasses/Sky/Sky.h",
            "py4godot/cppclasses/Slider/Slider.h",
            "py4godot/cppclasses/SliderJoint3D/SliderJoint3D.h",
            "py4godot/cppclasses/SoftBody3D/SoftBody3D.h",
            "py4godot/cppclasses/SphereMesh/SphereMesh.h",
            "py4godot/cppclasses/SphereOccluder3D/SphereOccluder3D.h",
            "py4godot/cppclasses/SphereShape3D/SphereShape3D.h",
            "py4godot/cppclasses/SpinBox/SpinBox.h",
            "py4godot/cppclasses/SplitContainer/SplitContainer.h",
            "py4godot/cppclasses/SpotLight3D/SpotLight3D.h",
            "py4godot/cppclasses/SpringArm3D/SpringArm3D.h",
            "py4godot/cppclasses/Sprite2D/Sprite2D.h",
            "py4godot/cppclasses/Sprite3D/Sprite3D.h",
            "py4godot/cppclasses/SpriteBase3D/SpriteBase3D.h",
            "py4godot/cppclasses/SpriteFrames/SpriteFrames.h",
            "py4godot/cppclasses/StandardMaterial3D/StandardMaterial3D.h",
            "py4godot/cppclasses/StaticBody2D/StaticBody2D.h",
            "py4godot/cppclasses/StaticBody3D/StaticBody3D.h",
            "py4godot/cppclasses/StatusIndicator/StatusIndicator.h",
            "py4godot/cppclasses/StreamPeer/StreamPeer.h",
            "py4godot/cppclasses/StreamPeerBuffer/StreamPeerBuffer.h",
            "py4godot/cppclasses/StreamPeerExtension/StreamPeerExtension.h",
            "py4godot/cppclasses/StreamPeerGZIP/StreamPeerGZIP.h",
            "py4godot/cppclasses/StreamPeerTCP/StreamPeerTCP.h",
            "py4godot/cppclasses/StreamPeerTLS/StreamPeerTLS.h",
            "py4godot/cppclasses/StyleBox/StyleBox.h",
            "py4godot/cppclasses/StyleBoxEmpty/StyleBoxEmpty.h",
            "py4godot/cppclasses/StyleBoxFlat/StyleBoxFlat.h",
            "py4godot/cppclasses/StyleBoxLine/StyleBoxLine.h",
            "py4godot/cppclasses/StyleBoxTexture/StyleBoxTexture.h",
            "py4godot/cppclasses/SubViewport/SubViewport.h",
            "py4godot/cppclasses/SubViewportContainer/SubViewportContainer.h",
            "py4godot/cppclasses/SurfaceTool/SurfaceTool.h",
            "py4godot/cppclasses/SyntaxHighlighter/SyntaxHighlighter.h",
            "py4godot/cppclasses/SystemFont/SystemFont.h",
            "py4godot/cppclasses/TCPServer/TCPServer.h",
            "py4godot/cppclasses/TLSOptions/TLSOptions.h",
            "py4godot/cppclasses/TabBar/TabBar.h",
            "py4godot/cppclasses/TabContainer/TabContainer.h",
            "py4godot/cppclasses/TextEdit/TextEdit.h",
            "py4godot/cppclasses/TextLine/TextLine.h",
            "py4godot/cppclasses/TextMesh/TextMesh.h",
            "py4godot/cppclasses/TextParagraph/TextParagraph.h",
            "py4godot/cppclasses/TextServer/TextServer.h",
            "py4godot/cppclasses/TextServerAdvanced/TextServerAdvanced.h",
            "py4godot/cppclasses/TextServerDummy/TextServerDummy.h",
            "py4godot/cppclasses/TextServerExtension/TextServerExtension.h",
            "py4godot/cppclasses/TextServerManager/TextServerManager.h",
            "py4godot/cppclasses/Texture/Texture.h",
            "py4godot/cppclasses/Texture2D/Texture2D.h",
            "py4godot/cppclasses/Texture2DArray/Texture2DArray.h",
            "py4godot/cppclasses/Texture2DArrayRD/Texture2DArrayRD.h",
            "py4godot/cppclasses/Texture2DRD/Texture2DRD.h",
            "py4godot/cppclasses/Texture3D/Texture3D.h",
            "py4godot/cppclasses/Texture3DRD/Texture3DRD.h",
            "py4godot/cppclasses/TextureButton/TextureButton.h",
            "py4godot/cppclasses/TextureCubemapArrayRD/TextureCubemapArrayRD.h",
            "py4godot/cppclasses/TextureCubemapRD/TextureCubemapRD.h",
            "py4godot/cppclasses/TextureLayered/TextureLayered.h",
            "py4godot/cppclasses/TextureLayeredRD/TextureLayeredRD.h",
            "py4godot/cppclasses/TextureProgressBar/TextureProgressBar.h",
            "py4godot/cppclasses/TextureRect/TextureRect.h",
            "py4godot/cppclasses/Theme/Theme.h",
            "py4godot/cppclasses/ThemeDB/ThemeDB.h",
            "py4godot/cppclasses/Thread/Thread.h",
            "py4godot/cppclasses/TileData/TileData.h",
            "py4godot/cppclasses/TileMap/TileMap.h",
            "py4godot/cppclasses/TileMapLayer/TileMapLayer.h",
            "py4godot/cppclasses/TileMapPattern/TileMapPattern.h",
            "py4godot/cppclasses/TileSet/TileSet.h",
            "py4godot/cppclasses/TileSetAtlasSource/TileSetAtlasSource.h",
            "py4godot/cppclasses/TileSetScenesCollectionSource/TileSetScenesCollectionSource.h",
            "py4godot/cppclasses/TileSetSource/TileSetSource.h",
            "py4godot/cppclasses/Time/Time.h",
            "py4godot/cppclasses/Timer/Timer.h",
            "py4godot/cppclasses/TorusMesh/TorusMesh.h",
            "py4godot/cppclasses/TouchScreenButton/TouchScreenButton.h",
            "py4godot/cppclasses/Translation/Translation.h",
            "py4godot/cppclasses/TranslationServer/TranslationServer.h",
            "py4godot/cppclasses/Tree/Tree.h",
            "py4godot/cppclasses/TreeItem/TreeItem.h",
            "py4godot/cppclasses/TriangleMesh/TriangleMesh.h",
            "py4godot/cppclasses/TubeTrailMesh/TubeTrailMesh.h",
            "py4godot/cppclasses/Tween/Tween.h",
            "py4godot/cppclasses/Tweener/Tweener.h",
            "py4godot/cppclasses/UDPServer/UDPServer.h",
            "py4godot/cppclasses/UPNP/UPNP.h",
            "py4godot/cppclasses/UPNPDevice/UPNPDevice.h",
            "py4godot/cppclasses/UndoRedo/UndoRedo.h",
            "py4godot/cppclasses/UniformSetCacheRD/UniformSetCacheRD.h",
            "py4godot/cppclasses/VBoxContainer/VBoxContainer.h",
            "py4godot/cppclasses/VFlowContainer/VFlowContainer.h",
            "py4godot/cppclasses/VScrollBar/VScrollBar.h",
            "py4godot/cppclasses/VSeparator/VSeparator.h",
            "py4godot/cppclasses/VSlider/VSlider.h",
            "py4godot/cppclasses/VSplitContainer/VSplitContainer.h",
            "py4godot/cppclasses/VehicleBody3D/VehicleBody3D.h",
            "py4godot/cppclasses/VehicleWheel3D/VehicleWheel3D.h",
            "py4godot/cppclasses/VideoStream/VideoStream.h",
            "py4godot/cppclasses/VideoStreamPlayback/VideoStreamPlayback.h",
            "py4godot/cppclasses/VideoStreamPlayer/VideoStreamPlayer.h",
            "py4godot/cppclasses/VideoStreamTheora/VideoStreamTheora.h",
            "py4godot/cppclasses/Viewport/Viewport.h",
            "py4godot/cppclasses/ViewportTexture/ViewportTexture.h",
            "py4godot/cppclasses/VisibleOnScreenEnabler2D/VisibleOnScreenEnabler2D.h",
            "py4godot/cppclasses/VisibleOnScreenEnabler3D/VisibleOnScreenEnabler3D.h",
            "py4godot/cppclasses/VisibleOnScreenNotifier2D/VisibleOnScreenNotifier2D.h",
            "py4godot/cppclasses/VisibleOnScreenNotifier3D/VisibleOnScreenNotifier3D.h",
            "py4godot/cppclasses/VisualInstance3D/VisualInstance3D.h",
            "py4godot/cppclasses/VisualShader/VisualShader.h",
            "py4godot/cppclasses/VisualShaderNode/VisualShaderNode.h",
            "py4godot/cppclasses/VisualShaderNodeBillboard/VisualShaderNodeBillboard.h",
            "py4godot/cppclasses/VisualShaderNodeBooleanConstant/VisualShaderNodeBooleanConstant.h",
            "py4godot/cppclasses/VisualShaderNodeBooleanParameter/VisualShaderNodeBooleanParameter.h",
            "py4godot/cppclasses/VisualShaderNodeClamp/VisualShaderNodeClamp.h",
            "py4godot/cppclasses/VisualShaderNodeColorConstant/VisualShaderNodeColorConstant.h",
            "py4godot/cppclasses/VisualShaderNodeColorFunc/VisualShaderNodeColorFunc.h",
            "py4godot/cppclasses/VisualShaderNodeColorOp/VisualShaderNodeColorOp.h",
            "py4godot/cppclasses/VisualShaderNodeColorParameter/VisualShaderNodeColorParameter.h",
            "py4godot/cppclasses/VisualShaderNodeComment/VisualShaderNodeComment.h",
            "py4godot/cppclasses/VisualShaderNodeCompare/VisualShaderNodeCompare.h",
            "py4godot/cppclasses/VisualShaderNodeConstant/VisualShaderNodeConstant.h",
            "py4godot/cppclasses/VisualShaderNodeCubemap/VisualShaderNodeCubemap.h",
            "py4godot/cppclasses/VisualShaderNodeCubemapParameter/VisualShaderNodeCubemapParameter.h",
            "py4godot/cppclasses/VisualShaderNodeCurveTexture/VisualShaderNodeCurveTexture.h",
            "py4godot/cppclasses/VisualShaderNodeCurveXYZTexture/VisualShaderNodeCurveXYZTexture.h",
            "py4godot/cppclasses/VisualShaderNodeCustom/VisualShaderNodeCustom.h",
            "py4godot/cppclasses/VisualShaderNodeDerivativeFunc/VisualShaderNodeDerivativeFunc.h",
            "py4godot/cppclasses/VisualShaderNodeDeterminant/VisualShaderNodeDeterminant.h",
            "py4godot/cppclasses/VisualShaderNodeDistanceFade/VisualShaderNodeDistanceFade.h",
            "py4godot/cppclasses/VisualShaderNodeDotProduct/VisualShaderNodeDotProduct.h",
            "py4godot/cppclasses/VisualShaderNodeExpression/VisualShaderNodeExpression.h",
            "py4godot/cppclasses/VisualShaderNodeFaceForward/VisualShaderNodeFaceForward.h",
            "py4godot/cppclasses/VisualShaderNodeFloatConstant/VisualShaderNodeFloatConstant.h",
            "py4godot/cppclasses/VisualShaderNodeFloatFunc/VisualShaderNodeFloatFunc.h",
            "py4godot/cppclasses/VisualShaderNodeFloatOp/VisualShaderNodeFloatOp.h",
            "py4godot/cppclasses/VisualShaderNodeFloatParameter/VisualShaderNodeFloatParameter.h",
            "py4godot/cppclasses/VisualShaderNodeFrame/VisualShaderNodeFrame.h",
            "py4godot/cppclasses/VisualShaderNodeFresnel/VisualShaderNodeFresnel.h",
            "py4godot/cppclasses/VisualShaderNodeGlobalExpression/VisualShaderNodeGlobalExpression.h",
            "py4godot/cppclasses/VisualShaderNodeGroupBase/VisualShaderNodeGroupBase.h",
            "py4godot/cppclasses/VisualShaderNodeIf/VisualShaderNodeIf.h",
            "py4godot/cppclasses/VisualShaderNodeInput/VisualShaderNodeInput.h",
            "py4godot/cppclasses/VisualShaderNodeIntConstant/VisualShaderNodeIntConstant.h",
            "py4godot/cppclasses/VisualShaderNodeIntFunc/VisualShaderNodeIntFunc.h",
            "py4godot/cppclasses/VisualShaderNodeIntOp/VisualShaderNodeIntOp.h",
            "py4godot/cppclasses/VisualShaderNodeIntParameter/VisualShaderNodeIntParameter.h",
            "py4godot/cppclasses/VisualShaderNodeIs/VisualShaderNodeIs.h",
            "py4godot/cppclasses/VisualShaderNodeLinearSceneDepth/VisualShaderNodeLinearSceneDepth.h",
            "py4godot/cppclasses/VisualShaderNodeMix/VisualShaderNodeMix.h",
            "py4godot/cppclasses/VisualShaderNodeMultiplyAdd/VisualShaderNodeMultiplyAdd.h",
            "py4godot/cppclasses/VisualShaderNodeOuterProduct/VisualShaderNodeOuterProduct.h",
            "py4godot/cppclasses/VisualShaderNodeOutput/VisualShaderNodeOutput.h",
            "py4godot/cppclasses/VisualShaderNodeParameter/VisualShaderNodeParameter.h",
            "py4godot/cppclasses/VisualShaderNodeParameterRef/VisualShaderNodeParameterRef.h",
            "py4godot/cppclasses/VisualShaderNodeParticleAccelerator/VisualShaderNodeParticleAccelerator.h",
            "py4godot/cppclasses/VisualShaderNodeParticleBoxEmitter/VisualShaderNodeParticleBoxEmitter.h",
            "py4godot/cppclasses/VisualShaderNodeParticleConeVelocity/VisualShaderNodeParticleConeVelocity.h",
            "py4godot/cppclasses/VisualShaderNodeParticleEmit/VisualShaderNodeParticleEmit.h",
            "py4godot/cppclasses/VisualShaderNodeParticleEmitter/VisualShaderNodeParticleEmitter.h",
            "py4godot/cppclasses/VisualShaderNodeParticleMeshEmitter/VisualShaderNodeParticleMeshEmitter.h",
            "py4godot/cppclasses/VisualShaderNodeParticleMultiplyByAxisAngle/VisualShaderNodeParticleMultiplyByAxisAngle.h",
            "py4godot/cppclasses/VisualShaderNodeParticleOutput/VisualShaderNodeParticleOutput.h",
            "py4godot/cppclasses/VisualShaderNodeParticleRandomness/VisualShaderNodeParticleRandomness.h",
            "py4godot/cppclasses/VisualShaderNodeParticleRingEmitter/VisualShaderNodeParticleRingEmitter.h",
            "py4godot/cppclasses/VisualShaderNodeParticleSphereEmitter/VisualShaderNodeParticleSphereEmitter.h",
            "py4godot/cppclasses/VisualShaderNodeProximityFade/VisualShaderNodeProximityFade.h",
            "py4godot/cppclasses/VisualShaderNodeRandomRange/VisualShaderNodeRandomRange.h",
            "py4godot/cppclasses/VisualShaderNodeRemap/VisualShaderNodeRemap.h",
            "py4godot/cppclasses/VisualShaderNodeReroute/VisualShaderNodeReroute.h",
            "py4godot/cppclasses/VisualShaderNodeResizableBase/VisualShaderNodeResizableBase.h",
            "py4godot/cppclasses/VisualShaderNodeRotationByAxis/VisualShaderNodeRotationByAxis.h",
            "py4godot/cppclasses/VisualShaderNodeSDFRaymarch/VisualShaderNodeSDFRaymarch.h",
            "py4godot/cppclasses/VisualShaderNodeSDFToScreenUV/VisualShaderNodeSDFToScreenUV.h",
            "py4godot/cppclasses/VisualShaderNodeSample3D/VisualShaderNodeSample3D.h",
            "py4godot/cppclasses/VisualShaderNodeScreenNormalWorldSpace/VisualShaderNodeScreenNormalWorldSpace.h",
            "py4godot/cppclasses/VisualShaderNodeScreenUVToSDF/VisualShaderNodeScreenUVToSDF.h",
            "py4godot/cppclasses/VisualShaderNodeSmoothStep/VisualShaderNodeSmoothStep.h",
            "py4godot/cppclasses/VisualShaderNodeStep/VisualShaderNodeStep.h",
            "py4godot/cppclasses/VisualShaderNodeSwitch/VisualShaderNodeSwitch.h",
            "py4godot/cppclasses/VisualShaderNodeTexture/VisualShaderNodeTexture.h",
            "py4godot/cppclasses/VisualShaderNodeTexture2DArray/VisualShaderNodeTexture2DArray.h",
            "py4godot/cppclasses/VisualShaderNodeTexture2DArrayParameter/VisualShaderNodeTexture2DArrayParameter.h",
            "py4godot/cppclasses/VisualShaderNodeTexture2DParameter/VisualShaderNodeTexture2DParameter.h",
            "py4godot/cppclasses/VisualShaderNodeTexture3D/VisualShaderNodeTexture3D.h",
            "py4godot/cppclasses/VisualShaderNodeTexture3DParameter/VisualShaderNodeTexture3DParameter.h",
            "py4godot/cppclasses/VisualShaderNodeTextureParameter/VisualShaderNodeTextureParameter.h",
            "py4godot/cppclasses/VisualShaderNodeTextureParameterTriplanar/VisualShaderNodeTextureParameterTriplanar.h",
            "py4godot/cppclasses/VisualShaderNodeTextureSDF/VisualShaderNodeTextureSDF.h",
            "py4godot/cppclasses/VisualShaderNodeTextureSDFNormal/VisualShaderNodeTextureSDFNormal.h",
            "py4godot/cppclasses/VisualShaderNodeTransformCompose/VisualShaderNodeTransformCompose.h",
            "py4godot/cppclasses/VisualShaderNodeTransformConstant/VisualShaderNodeTransformConstant.h",
            "py4godot/cppclasses/VisualShaderNodeTransformDecompose/VisualShaderNodeTransformDecompose.h",
            "py4godot/cppclasses/VisualShaderNodeTransformFunc/VisualShaderNodeTransformFunc.h",
            "py4godot/cppclasses/VisualShaderNodeTransformOp/VisualShaderNodeTransformOp.h",
            "py4godot/cppclasses/VisualShaderNodeTransformParameter/VisualShaderNodeTransformParameter.h",
            "py4godot/cppclasses/VisualShaderNodeTransformVecMult/VisualShaderNodeTransformVecMult.h",
            "py4godot/cppclasses/VisualShaderNodeUIntConstant/VisualShaderNodeUIntConstant.h",
            "py4godot/cppclasses/VisualShaderNodeUIntFunc/VisualShaderNodeUIntFunc.h",
            "py4godot/cppclasses/VisualShaderNodeUIntOp/VisualShaderNodeUIntOp.h",
            "py4godot/cppclasses/VisualShaderNodeUIntParameter/VisualShaderNodeUIntParameter.h",
            "py4godot/cppclasses/VisualShaderNodeUVFunc/VisualShaderNodeUVFunc.h",
            "py4godot/cppclasses/VisualShaderNodeUVPolarCoord/VisualShaderNodeUVPolarCoord.h",
            "py4godot/cppclasses/VisualShaderNodeVarying/VisualShaderNodeVarying.h",
            "py4godot/cppclasses/VisualShaderNodeVaryingGetter/VisualShaderNodeVaryingGetter.h",
            "py4godot/cppclasses/VisualShaderNodeVaryingSetter/VisualShaderNodeVaryingSetter.h",
            "py4godot/cppclasses/VisualShaderNodeVec2Constant/VisualShaderNodeVec2Constant.h",
            "py4godot/cppclasses/VisualShaderNodeVec2Parameter/VisualShaderNodeVec2Parameter.h",
            "py4godot/cppclasses/VisualShaderNodeVec3Constant/VisualShaderNodeVec3Constant.h",
            "py4godot/cppclasses/VisualShaderNodeVec3Parameter/VisualShaderNodeVec3Parameter.h",
            "py4godot/cppclasses/VisualShaderNodeVec4Constant/VisualShaderNodeVec4Constant.h",
            "py4godot/cppclasses/VisualShaderNodeVec4Parameter/VisualShaderNodeVec4Parameter.h",
            "py4godot/cppclasses/VisualShaderNodeVectorBase/VisualShaderNodeVectorBase.h",
            "py4godot/cppclasses/VisualShaderNodeVectorCompose/VisualShaderNodeVectorCompose.h",
            "py4godot/cppclasses/VisualShaderNodeVectorDecompose/VisualShaderNodeVectorDecompose.h",
            "py4godot/cppclasses/VisualShaderNodeVectorDistance/VisualShaderNodeVectorDistance.h",
            "py4godot/cppclasses/VisualShaderNodeVectorFunc/VisualShaderNodeVectorFunc.h",
            "py4godot/cppclasses/VisualShaderNodeVectorLen/VisualShaderNodeVectorLen.h",
            "py4godot/cppclasses/VisualShaderNodeVectorOp/VisualShaderNodeVectorOp.h",
            "py4godot/cppclasses/VisualShaderNodeVectorRefract/VisualShaderNodeVectorRefract.h",
            "py4godot/cppclasses/VisualShaderNodeWorldPositionFromDepth/VisualShaderNodeWorldPositionFromDepth.h",
            "py4godot/cppclasses/VoxelGI/VoxelGI.h",
            "py4godot/cppclasses/VoxelGIData/VoxelGIData.h",
            "py4godot/cppclasses/WeakRef/WeakRef.h",
            "py4godot/cppclasses/WebRTCDataChannel/WebRTCDataChannel.h",
            "py4godot/cppclasses/WebRTCDataChannelExtension/WebRTCDataChannelExtension.h",
            "py4godot/cppclasses/WebRTCMultiplayerPeer/WebRTCMultiplayerPeer.h",
            "py4godot/cppclasses/WebRTCPeerConnection/WebRTCPeerConnection.h",
            "py4godot/cppclasses/WebRTCPeerConnectionExtension/WebRTCPeerConnectionExtension.h",
            "py4godot/cppclasses/WebSocketMultiplayerPeer/WebSocketMultiplayerPeer.h",
            "py4godot/cppclasses/WebSocketPeer/WebSocketPeer.h",
            "py4godot/cppclasses/WebXRInterface/WebXRInterface.h",
            "py4godot/cppclasses/Window/Window.h",
            "py4godot/cppclasses/WorkerThreadPool/WorkerThreadPool.h",
            "py4godot/cppclasses/World2D/World2D.h",
            "py4godot/cppclasses/World3D/World3D.h",
            "py4godot/cppclasses/WorldBoundaryShape2D/WorldBoundaryShape2D.h",
            "py4godot/cppclasses/WorldBoundaryShape3D/WorldBoundaryShape3D.h",
            "py4godot/cppclasses/WorldEnvironment/WorldEnvironment.h",
            "py4godot/cppclasses/X509Certificate/X509Certificate.h",
            "py4godot/cppclasses/XMLParser/XMLParser.h",
            "py4godot/cppclasses/XRAnchor3D/XRAnchor3D.h",
            "py4godot/cppclasses/XRBodyModifier3D/XRBodyModifier3D.h",
            "py4godot/cppclasses/XRBodyTracker/XRBodyTracker.h",
            "py4godot/cppclasses/XRCamera3D/XRCamera3D.h",
            "py4godot/cppclasses/XRController3D/XRController3D.h",
            "py4godot/cppclasses/XRControllerTracker/XRControllerTracker.h",
            "py4godot/cppclasses/XRFaceModifier3D/XRFaceModifier3D.h",
            "py4godot/cppclasses/XRFaceTracker/XRFaceTracker.h",
            "py4godot/cppclasses/XRHandModifier3D/XRHandModifier3D.h",
            "py4godot/cppclasses/XRHandTracker/XRHandTracker.h",
            "py4godot/cppclasses/XRInterface/XRInterface.h",
            "py4godot/cppclasses/XRInterfaceExtension/XRInterfaceExtension.h",
            "py4godot/cppclasses/XRNode3D/XRNode3D.h",
            "py4godot/cppclasses/XROrigin3D/XROrigin3D.h",
            "py4godot/cppclasses/XRPose/XRPose.h",
            "py4godot/cppclasses/XRPositionalTracker/XRPositionalTracker.h",
            "py4godot/cppclasses/XRServer/XRServer.h",
            "py4godot/cppclasses/XRTracker/XRTracker.h",
            "py4godot/cppclasses/XRVRS/XRVRS.h",
            "py4godot/cppclasses/ZIPPacker/ZIPPacker.h",
            "py4godot/cppclasses/ZIPReader/ZIPReader.h",
            "py4godot/cppclasses/generated4_core.h",
            "py4godot/cppclasses/typedarrays.h",
            "py4godot/cppcore/Variant.h",
            "py4godot/cpputils/VariantTypeWrapper.h",
            "py4godot/cpputils/Wrapper.h",
            "py4godot/godot_bindings/binding4.h",
            "py4godot/godot_bindings/functions.h"
        ],
        "include_dirs": [
            "py4godot/core/variant4",
            "py4godot/godot_bindings"
        ],
        "language": "c++",
        "name": "py4godot.utils.instance_utils",
        "sources": [
            "py4godot/utils/instance_utils.pyx"
        ]
    },
    "module_name": "py4godot.utils.instance_utils"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_11" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000BF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__py4godot__utils__instance_utils
#define __PYX_HAVE_API__py4godot__utils__instance_utils
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <memory>
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include "binding4.h"
#include "functions.h"
#include "py4godot/cppcore/Variant.h"
#include "variant_utils.h"
#include <vector>
#include <stddef.h>
#include "pythread.h"
#include "py4godot/cpputils/Wrapper.h"
#include "py4godot/cpputils/VariantTypeWrapper.h"
#include "py4godot/cppclasses/typedarrays.h"
#include "py4godot/cppclasses/generated4_core.h"
#include "py4godot/cppclasses/Object/Object.h"
#include "py4godot/cppclasses/RefCounted/RefCounted.h"
#include "py4godot/cppclasses/AESContext/AESContext.h"
#include "py4godot/cppclasses/AStar2D/AStar2D.h"
#include "py4godot/cppclasses/AStar3D/AStar3D.h"
#include "py4godot/cppclasses/AStarGrid2D/AStarGrid2D.h"
#include "py4godot/cppclasses/Resource/Resource.h"
#include "py4godot/cppclasses/Texture/Texture.h"
#include "py4godot/cppclasses/Texture2D/Texture2D.h"
#include "py4godot/cppclasses/AnimatedTexture/AnimatedTexture.h"
#include "py4godot/cppclasses/AtlasTexture/AtlasTexture.h"
#include "py4godot/cppclasses/CameraTexture/CameraTexture.h"
#include "py4godot/cppclasses/CanvasTexture/CanvasTexture.h"
#include "py4godot/cppclasses/CompressedTexture2D/CompressedTexture2D.h"
#include "py4godot/cppclasses/CurveTexture/CurveTexture.h"
#include "py4godot/cppclasses/CurveXYZTexture/CurveXYZTexture.h"
#include "py4godot/cppclasses/GradientTexture1D/GradientTexture1D.h"
#include "py4godot/cppclasses/GradientTexture2D/GradientTexture2D.h"
#include "py4godot/cppclasses/ImageTexture/ImageTexture.h"
#include "py4godot/cppclasses/MeshTexture/MeshTexture.h"
#include "py4godot/cppclasses/NoiseTexture2D/NoiseTexture2D.h"
#include "py4godot/cppclasses/PlaceholderTexture2D/PlaceholderTexture2D.h"
#include "py4godot/cppclasses/PortableCompressedTexture2D/PortableCompressedTexture2D.h"
#include "py4godot/cppclasses/Texture2DRD/Texture2DRD.h"
#include "py4godot/cppclasses/ViewportTexture/ViewportTexture.h"
#include "py4godot/cppclasses/TextureLayered/TextureLayered.h"
#include "py4godot/cppclasses/CompressedTextureLayered/CompressedTextureLayered.h"
#include "py4godot/cppclasses/CompressedCubemap/CompressedCubemap.h"
#include "py4godot/cppclasses/CompressedCubemapArray/CompressedCubemapArray.h"
#include "py4godot/cppclasses/CompressedTexture2DArray/CompressedTexture2DArray.h"
#include "py4godot/cppclasses/ImageTextureLayered/ImageTextureLayered.h"
#include "py4godot/cppclasses/Cubemap/Cubemap.h"
#include "py4godot/cppclasses/CubemapArray/CubemapArray.h"
#include "py4godot/cppclasses/Texture2DArray/Texture2DArray.h"
#include "py4godot/cppclasses/PlaceholderTextureLayered/PlaceholderTextureLayered.h"
#include "py4godot/cppclasses/PlaceholderCubemap/PlaceholderCubemap.h"
#include "py4godot/cppclasses/PlaceholderCubemapArray/PlaceholderCubemapArray.h"
#include "py4godot/cppclasses/PlaceholderTexture2DArray/PlaceholderTexture2DArray.h"
#include "py4godot/cppclasses/TextureLayeredRD/TextureLayeredRD.h"
#include "py4godot/cppclasses/Texture2DArrayRD/Texture2DArrayRD.h"
#include "py4godot/cppclasses/TextureCubemapArrayRD/TextureCubemapArrayRD.h"
#include "py4godot/cppclasses/TextureCubemapRD/TextureCubemapRD.h"
#include "py4godot/cppclasses/Texture3D/Texture3D.h"
#include "py4godot/cppclasses/CompressedTexture3D/CompressedTexture3D.h"
#include "py4godot/cppclasses/ImageTexture3D/ImageTexture3D.h"
#include "py4godot/cppclasses/NoiseTexture3D/NoiseTexture3D.h"
#include "py4godot/cppclasses/PlaceholderTexture3D/PlaceholderTexture3D.h"
#include "py4godot/cppclasses/Texture3DRD/Texture3DRD.h"
#include "py4godot/cppclasses/Animation/Animation.h"
#include "py4godot/cppclasses/AnimationLibrary/AnimationLibrary.h"
#include "py4godot/cppclasses/AnimationNode/AnimationNode.h"
#include "py4godot/cppclasses/AnimationNodeSync/AnimationNodeSync.h"
#include "py4godot/cppclasses/AnimationNodeAdd2/AnimationNodeAdd2.h"
#include "py4godot/cppclasses/AnimationNodeAdd3/AnimationNodeAdd3.h"
#include "py4godot/cppclasses/AnimationNodeBlend2/AnimationNodeBlend2.h"
#include "py4godot/cppclasses/AnimationNodeBlend3/AnimationNodeBlend3.h"
#include "py4godot/cppclasses/AnimationNodeOneShot/AnimationNodeOneShot.h"
#include "py4godot/cppclasses/AnimationNodeSub2/AnimationNodeSub2.h"
#include "py4godot/cppclasses/AnimationNodeTransition/AnimationNodeTransition.h"
#include "py4godot/cppclasses/AnimationRootNode/AnimationRootNode.h"
#include "py4godot/cppclasses/AnimationNodeAnimation/AnimationNodeAnimation.h"
#include "py4godot/cppclasses/AnimationNodeBlendSpace1D/AnimationNodeBlendSpace1D.h"
#include "py4godot/cppclasses/AnimationNodeBlendSpace2D/AnimationNodeBlendSpace2D.h"
#include "py4godot/cppclasses/AnimationNodeBlendTree/AnimationNodeBlendTree.h"
#include "py4godot/cppclasses/AnimationNodeStateMachine/AnimationNodeStateMachine.h"
#include "py4godot/cppclasses/AnimationNodeOutput/AnimationNodeOutput.h"
#include "py4godot/cppclasses/AnimationNodeTimeScale/AnimationNodeTimeScale.h"
#include "py4godot/cppclasses/AnimationNodeTimeSeek/AnimationNodeTimeSeek.h"
#include "py4godot/cppclasses/AnimationNodeStateMachinePlayback/AnimationNodeStateMachinePlayback.h"
#include "py4godot/cppclasses/AnimationNodeStateMachineTransition/AnimationNodeStateMachineTransition.h"
#include "py4godot/cppclasses/Mesh/Mesh.h"
#include "py4godot/cppclasses/ArrayMesh/ArrayMesh.h"
#include "py4godot/cppclasses/PrimitiveMesh/PrimitiveMesh.h"
#include "py4godot/cppclasses/BoxMesh/BoxMesh.h"
#include "py4godot/cppclasses/CapsuleMesh/CapsuleMesh.h"
#include "py4godot/cppclasses/CylinderMesh/CylinderMesh.h"
#include "py4godot/cppclasses/PlaneMesh/PlaneMesh.h"
#include "py4godot/cppclasses/QuadMesh/QuadMesh.h"
#include "py4godot/cppclasses/PointMesh/PointMesh.h"
#include "py4godot/cppclasses/PrismMesh/PrismMesh.h"
#include "py4godot/cppclasses/RibbonTrailMesh/RibbonTrailMesh.h"
#include "py4godot/cppclasses/SphereMesh/SphereMesh.h"
#include "py4godot/cppclasses/TextMesh/TextMesh.h"
#include "py4godot/cppclasses/TorusMesh/TorusMesh.h"
#include "py4godot/cppclasses/TubeTrailMesh/TubeTrailMesh.h"
#include "py4godot/cppclasses/ImmediateMesh/ImmediateMesh.h"
#include "py4godot/cppclasses/PlaceholderMesh/PlaceholderMesh.h"
#include "py4godot/cppclasses/Occluder3D/Occluder3D.h"
#include "py4godot/cppclasses/ArrayOccluder3D/ArrayOccluder3D.h"
#include "py4godot/cppclasses/BoxOccluder3D/BoxOccluder3D.h"
#include "py4godot/cppclasses/PolygonOccluder3D/PolygonOccluder3D.h"
#include "py4godot/cppclasses/QuadOccluder3D/QuadOccluder3D.h"
#include "py4godot/cppclasses/SphereOccluder3D/SphereOccluder3D.h"
#include "py4godot/cppclasses/AudioBusLayout/AudioBusLayout.h"
#include "py4godot/cppclasses/AudioEffect/AudioEffect.h"
#include "py4godot/cppclasses/AudioEffectAmplify/AudioEffectAmplify.h"
#include "py4godot/cppclasses/AudioEffectFilter/AudioEffectFilter.h"
#include "py4godot/cppclasses/AudioEffectBandLimitFilter/AudioEffectBandLimitFilter.h"
#include "py4godot/cppclasses/AudioEffectBandPassFilter/AudioEffectBandPassFilter.h"
#include "py4godot/cppclasses/AudioEffectHighPassFilter/AudioEffectHighPassFilter.h"
#include "py4godot/cppclasses/AudioEffectHighShelfFilter/AudioEffectHighShelfFilter.h"
#include "py4godot/cppclasses/AudioEffectLowPassFilter/AudioEffectLowPassFilter.h"
#include "py4godot/cppclasses/AudioEffectLowShelfFilter/AudioEffectLowShelfFilter.h"
#include "py4godot/cppclasses/AudioEffectNotchFilter/AudioEffectNotchFilter.h"
#include "py4godot/cppclasses/AudioEffectCapture/AudioEffectCapture.h"
#include "py4godot/cppclasses/AudioEffectChorus/AudioEffectChorus.h"
#include "py4godot/cppclasses/AudioEffectCompressor/AudioEffectCompressor.h"
#include "py4godot/cppclasses/AudioEffectDelay/AudioEffectDelay.h"
#include "py4godot/cppclasses/AudioEffectDistortion/AudioEffectDistortion.h"
#include "py4godot/cppclasses/AudioEffectEQ/AudioEffectEQ.h"
#include "py4godot/cppclasses/AudioEffectEQ10/AudioEffectEQ10.h"
#include "py4godot/cppclasses/AudioEffectEQ21/AudioEffectEQ21.h"
#include "py4godot/cppclasses/AudioEffectEQ6/AudioEffectEQ6.h"
#include "py4godot/cppclasses/AudioEffectHardLimiter/AudioEffectHardLimiter.h"
#include "py4godot/cppclasses/AudioEffectLimiter/AudioEffectLimiter.h"
#include "py4godot/cppclasses/AudioEffectPanner/AudioEffectPanner.h"
#include "py4godot/cppclasses/AudioEffectPhaser/AudioEffectPhaser.h"
#include "py4godot/cppclasses/AudioEffectPitchShift/AudioEffectPitchShift.h"
#include "py4godot/cppclasses/AudioEffectRecord/AudioEffectRecord.h"
#include "py4godot/cppclasses/AudioEffectReverb/AudioEffectReverb.h"
#include "py4godot/cppclasses/AudioEffectSpectrumAnalyzer/AudioEffectSpectrumAnalyzer.h"
#include "py4godot/cppclasses/AudioEffectStereoEnhance/AudioEffectStereoEnhance.h"
#include "py4godot/cppclasses/AudioStream/AudioStream.h"
#include "py4godot/cppclasses/AudioStreamGenerator/AudioStreamGenerator.h"
#include "py4godot/cppclasses/AudioStreamInteractive/AudioStreamInteractive.h"
#include "py4godot/cppclasses/AudioStreamMP3/AudioStreamMP3.h"
#include "py4godot/cppclasses/AudioStreamMicrophone/AudioStreamMicrophone.h"
#include "py4godot/cppclasses/AudioStreamOggVorbis/AudioStreamOggVorbis.h"
#include "py4godot/cppclasses/AudioStreamPlaylist/AudioStreamPlaylist.h"
#include "py4godot/cppclasses/AudioStreamPolyphonic/AudioStreamPolyphonic.h"
#include "py4godot/cppclasses/AudioStreamRandomizer/AudioStreamRandomizer.h"
#include "py4godot/cppclasses/AudioStreamSynchronized/AudioStreamSynchronized.h"
#include "py4godot/cppclasses/AudioStreamWAV/AudioStreamWAV.h"
#include "py4godot/cppclasses/Material/Material.h"
#include "py4godot/cppclasses/BaseMaterial3D/BaseMaterial3D.h"
#include "py4godot/cppclasses/ORMMaterial3D/ORMMaterial3D.h"
#include "py4godot/cppclasses/StandardMaterial3D/StandardMaterial3D.h"
#include "py4godot/cppclasses/CanvasItemMaterial/CanvasItemMaterial.h"
#include "py4godot/cppclasses/FogMaterial/FogMaterial.h"
#include "py4godot/cppclasses/PanoramaSkyMaterial/PanoramaSkyMaterial.h"
#include "py4godot/cppclasses/ParticleProcessMaterial/ParticleProcessMaterial.h"
#include "py4godot/cppclasses/PhysicalSkyMaterial/PhysicalSkyMaterial.h"
#include "py4godot/cppclasses/PlaceholderMaterial/PlaceholderMaterial.h"
#include "py4godot/cppclasses/ProceduralSkyMaterial/ProceduralSkyMaterial.h"
#include "py4godot/cppclasses/ShaderMaterial/ShaderMaterial.h"
#include "py4godot/cppclasses/BitMap/BitMap.h"
#include "py4godot/cppclasses/BoneMap/BoneMap.h"
#include "py4godot/cppclasses/Shape3D/Shape3D.h"
#include "py4godot/cppclasses/BoxShape3D/BoxShape3D.h"
#include "py4godot/cppclasses/CapsuleShape3D/CapsuleShape3D.h"
#include "py4godot/cppclasses/ConcavePolygonShape3D/ConcavePolygonShape3D.h"
#include "py4godot/cppclasses/ConvexPolygonShape3D/ConvexPolygonShape3D.h"
#include "py4godot/cppclasses/CylinderShape3D/CylinderShape3D.h"
#include "py4godot/cppclasses/HeightMapShape3D/HeightMapShape3D.h"
#include "py4godot/cppclasses/SeparationRayShape3D/SeparationRayShape3D.h"
#include "py4godot/cppclasses/SphereShape3D/SphereShape3D.h"
#include "py4godot/cppclasses/WorldBoundaryShape3D/WorldBoundaryShape3D.h"
#include "py4godot/cppclasses/ButtonGroup/ButtonGroup.h"
#include "py4godot/cppclasses/CameraAttributes/CameraAttributes.h"
#include "py4godot/cppclasses/CameraAttributesPhysical/CameraAttributesPhysical.h"
#include "py4godot/cppclasses/CameraAttributesPractical/CameraAttributesPractical.h"
#include "py4godot/cppclasses/Shape2D/Shape2D.h"
#include "py4godot/cppclasses/CapsuleShape2D/CapsuleShape2D.h"
#include "py4godot/cppclasses/CircleShape2D/CircleShape2D.h"
#include "py4godot/cppclasses/ConcavePolygonShape2D/ConcavePolygonShape2D.h"
#include "py4godot/cppclasses/ConvexPolygonShape2D/ConvexPolygonShape2D.h"
#include "py4godot/cppclasses/RectangleShape2D/RectangleShape2D.h"
#include "py4godot/cppclasses/SegmentShape2D/SegmentShape2D.h"
#include "py4godot/cppclasses/SeparationRayShape2D/SeparationRayShape2D.h"
#include "py4godot/cppclasses/WorldBoundaryShape2D/WorldBoundaryShape2D.h"
#include "py4godot/cppclasses/SyntaxHighlighter/SyntaxHighlighter.h"
#include "py4godot/cppclasses/CodeHighlighter/CodeHighlighter.h"
#include "py4godot/cppclasses/EditorSyntaxHighlighter/EditorSyntaxHighlighter.h"
#include "py4godot/cppclasses/Compositor/Compositor.h"
#include "py4godot/cppclasses/CompositorEffect/CompositorEffect.h"
#include "py4godot/cppclasses/CryptoKey/CryptoKey.h"
#include "py4godot/cppclasses/Curve/Curve.h"
#include "py4godot/cppclasses/Curve2D/Curve2D.h"
#include "py4godot/cppclasses/Curve3D/Curve3D.h"
#include "py4godot/cppclasses/EditorNode3DGizmoPlugin/EditorNode3DGizmoPlugin.h"
#include "py4godot/cppclasses/EditorSettings/EditorSettings.h"
#include "py4godot/cppclasses/Environment/Environment.h"
#include "py4godot/cppclasses/GLTFDocument/GLTFDocument.h"
#include "py4godot/cppclasses/FBXDocument/FBXDocument.h"
#include "py4godot/cppclasses/GLTFState/GLTFState.h"
#include "py4godot/cppclasses/FBXState/FBXState.h"
#include "py4godot/cppclasses/Noise/Noise.h"
#include "py4godot/cppclasses/FastNoiseLite/FastNoiseLite.h"
#include "py4godot/cppclasses/Font/Font.h"
#include "py4godot/cppclasses/FontFile/FontFile.h"
#include "py4godot/cppclasses/FontVariation/FontVariation.h"
#include "py4godot/cppclasses/SystemFont/SystemFont.h"
#include "py4godot/cppclasses/GDExtension/GDExtension.h"
#include "py4godot/cppclasses/Script/Script.h"
#include "py4godot/cppclasses/GDScript/GDScript.h"
#include "py4godot/cppclasses/ScriptExtension/ScriptExtension.h"
#include "py4godot/cppclasses/GLTFAccessor/GLTFAccessor.h"
#include "py4godot/cppclasses/GLTFAnimation/GLTFAnimation.h"
#include "py4godot/cppclasses/GLTFBufferView/GLTFBufferView.h"
#include "py4godot/cppclasses/GLTFCamera/GLTFCamera.h"
#include "py4godot/cppclasses/GLTFDocumentExtension/GLTFDocumentExtension.h"
#include "py4godot/cppclasses/GLTFDocumentExtensionConvertImporterMesh/GLTFDocumentExtensionConvertImporterMesh.h"
#include "py4godot/cppclasses/GLTFLight/GLTFLight.h"
#include "py4godot/cppclasses/GLTFMesh/GLTFMesh.h"
#include "py4godot/cppclasses/GLTFNode/GLTFNode.h"
#include "py4godot/cppclasses/GLTFPhysicsBody/GLTFPhysicsBody.h"
#include "py4godot/cppclasses/GLTFPhysicsShape/GLTFPhysicsShape.h"
#include "py4godot/cppclasses/GLTFSkeleton/GLTFSkeleton.h"
#include "py4godot/cppclasses/GLTFSkin/GLTFSkin.h"
#include "py4godot/cppclasses/GLTFSpecGloss/GLTFSpecGloss.h"
#include "py4godot/cppclasses/GLTFTexture/GLTFTexture.h"
#include "py4godot/cppclasses/GLTFTextureSampler/GLTFTextureSampler.h"
#include "py4godot/cppclasses/Gradient/Gradient.h"
#include "py4godot/cppclasses/Image/Image.h"
#include "py4godot/cppclasses/ImporterMesh/ImporterMesh.h"
#include "py4godot/cppclasses/InputEvent/InputEvent.h"
#include "py4godot/cppclasses/InputEventAction/InputEventAction.h"
#include "py4godot/cppclasses/InputEventFromWindow/InputEventFromWindow.h"
#include "py4godot/cppclasses/InputEventWithModifiers/InputEventWithModifiers.h"
#include "py4godot/cppclasses/InputEventGesture/InputEventGesture.h"
#include "py4godot/cppclasses/InputEventMagnifyGesture/InputEventMagnifyGesture.h"
#include "py4godot/cppclasses/InputEventPanGesture/InputEventPanGesture.h"
#include "py4godot/cppclasses/InputEventKey/InputEventKey.h"
#include "py4godot/cppclasses/InputEventMouse/InputEventMouse.h"
#include "py4godot/cppclasses/InputEventMouseButton/InputEventMouseButton.h"
#include "py4godot/cppclasses/InputEventMouseMotion/InputEventMouseMotion.h"
#include "py4godot/cppclasses/InputEventScreenDrag/InputEventScreenDrag.h"
#include "py4godot/cppclasses/InputEventScreenTouch/InputEventScreenTouch.h"
#include "py4godot/cppclasses/InputEventJoypadButton/InputEventJoypadButton.h"
#include "py4godot/cppclasses/InputEventJoypadMotion/InputEventJoypadMotion.h"
#include "py4godot/cppclasses/InputEventMIDI/InputEventMIDI.h"
#include "py4godot/cppclasses/InputEventShortcut/InputEventShortcut.h"
#include "py4godot/cppclasses/JSON/JSON.h"
#include "py4godot/cppclasses/LabelSettings/LabelSettings.h"
#include "py4godot/cppclasses/LightmapGIData/LightmapGIData.h"
#include "py4godot/cppclasses/MeshLibrary/MeshLibrary.h"
#include "py4godot/cppclasses/MissingResource/MissingResource.h"
#include "py4godot/cppclasses/MultiMesh/MultiMesh.h"
#include "py4godot/cppclasses/NavigationMesh/NavigationMesh.h"
#include "py4godot/cppclasses/NavigationMeshSourceGeometryData2D/NavigationMeshSourceGeometryData2D.h"
#include "py4godot/cppclasses/NavigationMeshSourceGeometryData3D/NavigationMeshSourceGeometryData3D.h"
#include "py4godot/cppclasses/NavigationPolygon/NavigationPolygon.h"
#include "py4godot/cppclasses/OccluderPolygon2D/OccluderPolygon2D.h"
#include "py4godot/cppclasses/OggPacketSequence/OggPacketSequence.h"
#include "py4godot/cppclasses/OpenXRAction/OpenXRAction.h"
#include "py4godot/cppclasses/OpenXRActionMap/OpenXRActionMap.h"
#include "py4godot/cppclasses/OpenXRActionSet/OpenXRActionSet.h"
#include "py4godot/cppclasses/OpenXRIPBinding/OpenXRIPBinding.h"
#include "py4godot/cppclasses/OpenXRInteractionProfile/OpenXRInteractionProfile.h"
#include "py4godot/cppclasses/Translation/Translation.h"
#include "py4godot/cppclasses/OptimizedTranslation/OptimizedTranslation.h"
#include "py4godot/cppclasses/PackedDataContainer/PackedDataContainer.h"
#include "py4godot/cppclasses/PackedScene/PackedScene.h"
#include "py4godot/cppclasses/PhysicsMaterial/PhysicsMaterial.h"
#include "py4godot/cppclasses/PolygonPathFinder/PolygonPathFinder.h"
#include "py4godot/cppclasses/RDShaderFile/RDShaderFile.h"
#include "py4godot/cppclasses/RDShaderSPIRV/RDShaderSPIRV.h"
#include "py4godot/cppclasses/RichTextEffect/RichTextEffect.h"
#include "py4godot/cppclasses/SceneReplicationConfig/SceneReplicationConfig.h"
#include "py4godot/cppclasses/Shader/Shader.h"
#include "py4godot/cppclasses/VisualShader/VisualShader.h"
#include "py4godot/cppclasses/ShaderInclude/ShaderInclude.h"
#include "py4godot/cppclasses/Shortcut/Shortcut.h"
#include "py4godot/cppclasses/SkeletonModification2D/SkeletonModification2D.h"
#include "py4godot/cppclasses/SkeletonModification2DCCDIK/SkeletonModification2DCCDIK.h"
#include "py4godot/cppclasses/SkeletonModification2DFABRIK/SkeletonModification2DFABRIK.h"
#include "py4godot/cppclasses/SkeletonModification2DJiggle/SkeletonModification2DJiggle.h"
#include "py4godot/cppclasses/SkeletonModification2DLookAt/SkeletonModification2DLookAt.h"
#include "py4godot/cppclasses/SkeletonModification2DPhysicalBones/SkeletonModification2DPhysicalBones.h"
#include "py4godot/cppclasses/SkeletonModification2DStackHolder/SkeletonModification2DStackHolder.h"
#include "py4godot/cppclasses/SkeletonModification2DTwoBoneIK/SkeletonModification2DTwoBoneIK.h"
#include "py4godot/cppclasses/SkeletonModificationStack2D/SkeletonModificationStack2D.h"
#include "py4godot/cppclasses/SkeletonProfile/SkeletonProfile.h"
#include "py4godot/cppclasses/SkeletonProfileHumanoid/SkeletonProfileHumanoid.h"
#include "py4godot/cppclasses/Skin/Skin.h"
#include "py4godot/cppclasses/Sky/Sky.h"
#include "py4godot/cppclasses/SpriteFrames/SpriteFrames.h"
#include "py4godot/cppclasses/StyleBox/StyleBox.h"
#include "py4godot/cppclasses/StyleBoxEmpty/StyleBoxEmpty.h"
#include "py4godot/cppclasses/StyleBoxFlat/StyleBoxFlat.h"
#include "py4godot/cppclasses/StyleBoxLine/StyleBoxLine.h"
#include "py4godot/cppclasses/StyleBoxTexture/StyleBoxTexture.h"
#include "py4godot/cppclasses/Theme/Theme.h"
#include "py4godot/cppclasses/TileMapPattern/TileMapPattern.h"
#include "py4godot/cppclasses/TileSet/TileSet.h"
#include "py4godot/cppclasses/TileSetSource/TileSetSource.h"
#include "py4godot/cppclasses/TileSetAtlasSource/TileSetAtlasSource.h"
#include "py4godot/cppclasses/TileSetScenesCollectionSource/TileSetScenesCollectionSource.h"
#include "py4godot/cppclasses/VideoStream/VideoStream.h"
#include "py4godot/cppclasses/VideoStreamTheora/VideoStreamTheora.h"
#include "py4godot/cppclasses/VideoStreamPlayback/VideoStreamPlayback.h"
#include "py4godot/cppclasses/VisualShaderNode/VisualShaderNode.h"
#include "py4godot/cppclasses/VisualShaderNodeBillboard/VisualShaderNodeBillboard.h"
#include "py4godot/cppclasses/VisualShaderNodeConstant/VisualShaderNodeConstant.h"
#include "py4godot/cppclasses/VisualShaderNodeBooleanConstant/VisualShaderNodeBooleanConstant.h"
#include "py4godot/cppclasses/VisualShaderNodeColorConstant/VisualShaderNodeColorConstant.h"
#include "py4godot/cppclasses/VisualShaderNodeFloatConstant/VisualShaderNodeFloatConstant.h"
#include "py4godot/cppclasses/VisualShaderNodeIntConstant/VisualShaderNodeIntConstant.h"
#include "py4godot/cppclasses/VisualShaderNodeTransformConstant/VisualShaderNodeTransformConstant.h"
#include "py4godot/cppclasses/VisualShaderNodeUIntConstant/VisualShaderNodeUIntConstant.h"
#include "py4godot/cppclasses/VisualShaderNodeVec2Constant/VisualShaderNodeVec2Constant.h"
#include "py4godot/cppclasses/VisualShaderNodeVec3Constant/VisualShaderNodeVec3Constant.h"
#include "py4godot/cppclasses/VisualShaderNodeVec4Constant/VisualShaderNodeVec4Constant.h"
#include "py4godot/cppclasses/VisualShaderNodeParameter/VisualShaderNodeParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeBooleanParameter/VisualShaderNodeBooleanParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeColorParameter/VisualShaderNodeColorParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeTextureParameter/VisualShaderNodeTextureParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeCubemapParameter/VisualShaderNodeCubemapParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeTexture2DArrayParameter/VisualShaderNodeTexture2DArrayParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeTexture2DParameter/VisualShaderNodeTexture2DParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeTexture3DParameter/VisualShaderNodeTexture3DParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeTextureParameterTriplanar/VisualShaderNodeTextureParameterTriplanar.h"
#include "py4godot/cppclasses/VisualShaderNodeFloatParameter/VisualShaderNodeFloatParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeIntParameter/VisualShaderNodeIntParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeTransformParameter/VisualShaderNodeTransformParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeUIntParameter/VisualShaderNodeUIntParameter.h"
#include "py4godot/cppclasses/VisualShaderNodeVec2Parameter/VisualShaderNodeVec2Parameter.h"
#include "py4godot/cppclasses/VisualShaderNodeVec3Parameter/VisualShaderNodeVec3Parameter.h"
#include "py4godot/cppclasses/VisualShaderNodeVec4Parameter/VisualShaderNodeVec4Parameter.h"
#include "py4godot/cppclasses/VisualShaderNodeClamp/VisualShaderNodeClamp.h"
#include "py4godot/cppclasses/VisualShaderNodeColorFunc/VisualShaderNodeColorFunc.h"
#include "py4godot/cppclasses/VisualShaderNodeColorOp/VisualShaderNodeColorOp.h"
#include "py4godot/cppclasses/VisualShaderNodeResizableBase/VisualShaderNodeResizableBase.h"
#include "py4godot/cppclasses/VisualShaderNodeFrame/VisualShaderNodeFrame.h"
#include "py4godot/cppclasses/VisualShaderNodeComment/VisualShaderNodeComment.h"
#include "py4godot/cppclasses/VisualShaderNodeCurveTexture/VisualShaderNodeCurveTexture.h"
#include "py4godot/cppclasses/VisualShaderNodeCurveXYZTexture/VisualShaderNodeCurveXYZTexture.h"
#include "py4godot/cppclasses/VisualShaderNodeGroupBase/VisualShaderNodeGroupBase.h"
#include "py4godot/cppclasses/VisualShaderNodeExpression/VisualShaderNodeExpression.h"
#include "py4godot/cppclasses/VisualShaderNodeGlobalExpression/VisualShaderNodeGlobalExpression.h"
#include "py4godot/cppclasses/VisualShaderNodeCompare/VisualShaderNodeCompare.h"
#include "py4godot/cppclasses/VisualShaderNodeCubemap/VisualShaderNodeCubemap.h"
#include "py4godot/cppclasses/VisualShaderNodeCustom/VisualShaderNodeCustom.h"
#include "py4godot/cppclasses/VisualShaderNodeDerivativeFunc/VisualShaderNodeDerivativeFunc.h"
#include "py4godot/cppclasses/VisualShaderNodeDeterminant/VisualShaderNodeDeterminant.h"
#include "py4godot/cppclasses/VisualShaderNodeDistanceFade/VisualShaderNodeDistanceFade.h"
#include "py4godot/cppclasses/VisualShaderNodeDotProduct/VisualShaderNodeDotProduct.h"
#include "py4godot/cppclasses/VisualShaderNodeVectorBase/VisualShaderNodeVectorBase.h"
#include "py4godot/cppclasses/VisualShaderNodeFaceForward/VisualShaderNodeFaceForward.h"
#include "py4godot/cppclasses/VisualShaderNodeVectorCompose/VisualShaderNodeVectorCompose.h"
#include "py4godot/cppclasses/VisualShaderNodeVectorDecompose/VisualShaderNodeVectorDecompose.h"
#include "py4godot/cppclasses/VisualShaderNodeVectorDistance/VisualShaderNodeVectorDistance.h"
#include "py4godot/cppclasses/VisualShaderNodeVectorFunc/VisualShaderNodeVectorFunc.h"
#include "py4godot/cppclasses/VisualShaderNodeVectorLen/VisualShaderNodeVectorLen.h"
#include "py4godot/cppclasses/VisualShaderNodeVectorOp/VisualShaderNodeVectorOp.h"
#include "py4godot/cppclasses/VisualShaderNodeVectorRefract/VisualShaderNodeVectorRefract.h"
#include "py4godot/cppclasses/VisualShaderNodeFloatFunc/VisualShaderNodeFloatFunc.h"
#include "py4godot/cppclasses/VisualShaderNodeFloatOp/VisualShaderNodeFloatOp.h"
#include "py4godot/cppclasses/VisualShaderNodeFresnel/VisualShaderNodeFresnel.h"
#include "py4godot/cppclasses/VisualShaderNodeIf/VisualShaderNodeIf.h"
#include "py4godot/cppclasses/VisualShaderNodeInput/VisualShaderNodeInput.h"
#include "py4godot/cppclasses/VisualShaderNodeIntFunc/VisualShaderNodeIntFunc.h"
#include "py4godot/cppclasses/VisualShaderNodeIntOp/VisualShaderNodeIntOp.h"
#include "py4godot/cppclasses/VisualShaderNodeIs/VisualShaderNodeIs.h"
#include "py4godot/cppclasses/VisualShaderNodeLinearSceneDepth/VisualShaderNodeLinearSceneDepth.h"
#include "py4godot/cppclasses/VisualShaderNodeMix/VisualShaderNodeMix.h"
#include "py4godot/cppclasses/VisualShaderNodeMultiplyAdd/VisualShaderNodeMultiplyAdd.h"
#include "py4godot/cppclasses/VisualShaderNodeOuterProduct/VisualShaderNodeOuterProduct.h"
#include "py4godot/cppclasses/VisualShaderNodeOutput/VisualShaderNodeOutput.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleOutput/VisualShaderNodeParticleOutput.h"
#include "py4godot/cppclasses/VisualShaderNodeParameterRef/VisualShaderNodeParameterRef.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleAccelerator/VisualShaderNodeParticleAccelerator.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleEmitter/VisualShaderNodeParticleEmitter.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleBoxEmitter/VisualShaderNodeParticleBoxEmitter.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleMeshEmitter/VisualShaderNodeParticleMeshEmitter.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleRingEmitter/VisualShaderNodeParticleRingEmitter.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleSphereEmitter/VisualShaderNodeParticleSphereEmitter.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleConeVelocity/VisualShaderNodeParticleConeVelocity.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleEmit/VisualShaderNodeParticleEmit.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleMultiplyByAxisAngle/VisualShaderNodeParticleMultiplyByAxisAngle.h"
#include "py4godot/cppclasses/VisualShaderNodeParticleRandomness/VisualShaderNodeParticleRandomness.h"
#include "py4godot/cppclasses/VisualShaderNodeProximityFade/VisualShaderNodeProximityFade.h"
#include "py4godot/cppclasses/VisualShaderNodeRandomRange/VisualShaderNodeRandomRange.h"
#include "py4godot/cppclasses/VisualShaderNodeRemap/VisualShaderNodeRemap.h"
#include "py4godot/cppclasses/VisualShaderNodeReroute/VisualShaderNodeReroute.h"
#include "py4godot/cppclasses/VisualShaderNodeRotationByAxis/VisualShaderNodeRotationByAxis.h"
#include "py4godot/cppclasses/VisualShaderNodeSDFRaymarch/VisualShaderNodeSDFRaymarch.h"
#include "py4godot/cppclasses/VisualShaderNodeSDFToScreenUV/VisualShaderNodeSDFToScreenUV.h"
#include "py4godot/cppclasses/VisualShaderNodeSample3D/VisualShaderNodeSample3D.h"
#include "py4godot/cppclasses/VisualShaderNodeTexture2DArray/VisualShaderNodeTexture2DArray.h"
#include "py4godot/cppclasses/VisualShaderNodeTexture3D/VisualShaderNodeTexture3D.h"
#include "py4godot/cppclasses/VisualShaderNodeScreenNormalWorldSpace/VisualShaderNodeScreenNormalWorldSpace.h"
#include "py4godot/cppclasses/VisualShaderNodeScreenUVToSDF/VisualShaderNodeScreenUVToSDF.h"
#include "py4godot/cppclasses/VisualShaderNodeSmoothStep/VisualShaderNodeSmoothStep.h"
#include "py4godot/cppclasses/VisualShaderNodeStep/VisualShaderNodeStep.h"
#include "py4godot/cppclasses/VisualShaderNodeSwitch/VisualShaderNodeSwitch.h"
#include "py4godot/cppclasses/VisualShaderNodeTexture/VisualShaderNodeTexture.h"
#include "py4godot/cppclasses/VisualShaderNodeTextureSDF/VisualShaderNodeTextureSDF.h"
#include "py4godot/cppclasses/VisualShaderNodeTextureSDFNormal/VisualShaderNodeTextureSDFNormal.h"
#include "py4godot/cppclasses/VisualShaderNodeTransformCompose/VisualShaderNodeTransformCompose.h"
#include "py4godot/cppclasses/VisualShaderNodeTransformDecompose/VisualShaderNodeTransformDecompose.h"
#include "py4godot/cppclasses/VisualShaderNodeTransformFunc/VisualShaderNodeTransformFunc.h"
#include "py4godot/cppclasses/VisualShaderNodeTransformOp/VisualShaderNodeTransformOp.h"
#include "py4godot/cppclasses/VisualShaderNodeTransformVecMult/VisualShaderNodeTransformVecMult.h"
#include "py4godot/cppclasses/VisualShaderNodeUIntFunc/VisualShaderNodeUIntFunc.h"
#include "py4godot/cppclasses/VisualShaderNodeUIntOp/VisualShaderNodeUIntOp.h"
#include "py4godot/cppclasses/VisualShaderNodeUVFunc/VisualShaderNodeUVFunc.h"
#include "py4godot/cppclasses/VisualShaderNodeUVPolarCoord/VisualShaderNodeUVPolarCoord.h"
#include "py4godot/cppclasses/VisualShaderNodeVarying/VisualShaderNodeVarying.h"
#include "py4godot/cppclasses/VisualShaderNodeVaryingGetter/VisualShaderNodeVaryingGetter.h"
#include "py4godot/cppclasses/VisualShaderNodeVaryingSetter/VisualShaderNodeVaryingSetter.h"
#include "py4godot/cppclasses/VisualShaderNodeWorldPositionFromDepth/VisualShaderNodeWorldPositionFromDepth.h"
#include "py4godot/cppclasses/VoxelGIData/VoxelGIData.h"
#include "py4godot/cppclasses/World2D/World2D.h"
#include "py4godot/cppclasses/World3D/World3D.h"
#include "py4godot/cppclasses/X509Certificate/X509Certificate.h"
#include "py4godot/cppclasses/AudioEffectInstance/AudioEffectInstance.h"
#include "py4godot/cppclasses/AudioEffectSpectrumAnalyzerInstance/AudioEffectSpectrumAnalyzerInstance.h"
#include "py4godot/cppclasses/AudioSample/AudioSample.h"
#include "py4godot/cppclasses/AudioSamplePlayback/AudioSamplePlayback.h"
#include "py4godot/cppclasses/AudioStreamPlayback/AudioStreamPlayback.h"
#include "py4godot/cppclasses/AudioStreamPlaybackResampled/AudioStreamPlaybackResampled.h"
#include "py4godot/cppclasses/AudioStreamGeneratorPlayback/AudioStreamGeneratorPlayback.h"
#include "py4godot/cppclasses/AudioStreamPlaybackOggVorbis/AudioStreamPlaybackOggVorbis.h"
#include "py4godot/cppclasses/AudioStreamPlaybackInteractive/AudioStreamPlaybackInteractive.h"
#include "py4godot/cppclasses/AudioStreamPlaybackPlaylist/AudioStreamPlaybackPlaylist.h"
#include "py4godot/cppclasses/AudioStreamPlaybackPolyphonic/AudioStreamPlaybackPolyphonic.h"
#include "py4godot/cppclasses/AudioStreamPlaybackSynchronized/AudioStreamPlaybackSynchronized.h"
#include "py4godot/cppclasses/Tweener/Tweener.h"
#include "py4godot/cppclasses/CallbackTweener/CallbackTweener.h"
#include "py4godot/cppclasses/IntervalTweener/IntervalTweener.h"
#include "py4godot/cppclasses/MethodTweener/MethodTweener.h"
#include "py4godot/cppclasses/PropertyTweener/PropertyTweener.h"
#include "py4godot/cppclasses/CameraFeed/CameraFeed.h"
#include "py4godot/cppclasses/CharFXTransform/CharFXTransform.h"
#include "py4godot/cppclasses/ConfigFile/ConfigFile.h"
#include "py4godot/cppclasses/Crypto/Crypto.h"
#include "py4godot/cppclasses/DTLSServer/DTLSServer.h"
#include "py4godot/cppclasses/DirAccess/DirAccess.h"
#include "py4godot/cppclasses/ENetConnection/ENetConnection.h"
#include "py4godot/cppclasses/PacketPeer/PacketPeer.h"
#include "py4godot/cppclasses/MultiplayerPeer/MultiplayerPeer.h"
#include "py4godot/cppclasses/ENetMultiplayerPeer/ENetMultiplayerPeer.h"
#include "py4godot/cppclasses/MultiplayerPeerExtension/MultiplayerPeerExtension.h"
#include "py4godot/cppclasses/OfflineMultiplayerPeer/OfflineMultiplayerPeer.h"
#include "py4godot/cppclasses/WebRTCMultiplayerPeer/WebRTCMultiplayerPeer.h"
#include "py4godot/cppclasses/WebSocketMultiplayerPeer/WebSocketMultiplayerPeer.h"
#include "py4godot/cppclasses/ENetPacketPeer/ENetPacketPeer.h"
#include "py4godot/cppclasses/PacketPeerDTLS/PacketPeerDTLS.h"
#include "py4godot/cppclasses/PacketPeerExtension/PacketPeerExtension.h"
#include "py4godot/cppclasses/PacketPeerStream/PacketPeerStream.h"
#include "py4godot/cppclasses/PacketPeerUDP/PacketPeerUDP.h"
#include "py4godot/cppclasses/WebRTCDataChannel/WebRTCDataChannel.h"
#include "py4godot/cppclasses/WebRTCDataChannelExtension/WebRTCDataChannelExtension.h"
#include "py4godot/cppclasses/WebSocketPeer/WebSocketPeer.h"
#include "py4godot/cppclasses/EditorDebuggerPlugin/EditorDebuggerPlugin.h"
#include "py4godot/cppclasses/EditorDebuggerSession/EditorDebuggerSession.h"
#include "py4godot/cppclasses/EditorExportPlatform/EditorExportPlatform.h"
#include "py4godot/cppclasses/EditorExportPlatformAndroid/EditorExportPlatformAndroid.h"
#include "py4godot/cppclasses/EditorExportPlatformIOS/EditorExportPlatformIOS.h"
#include "py4godot/cppclasses/EditorExportPlatformPC/EditorExportPlatformPC.h"
#include "py4godot/cppclasses/EditorExportPlatformLinuxBSD/EditorExportPlatformLinuxBSD.h"
#include "py4godot/cppclasses/EditorExportPlatformWindows/EditorExportPlatformWindows.h"
#include "py4godot/cppclasses/EditorExportPlatformMacOS/EditorExportPlatformMacOS.h"
#include "py4godot/cppclasses/EditorExportPlatformWeb/EditorExportPlatformWeb.h"
#include "py4godot/cppclasses/EditorExportPlugin/EditorExportPlugin.h"
#include "py4godot/cppclasses/EditorFeatureProfile/EditorFeatureProfile.h"
#include "py4godot/cppclasses/EditorFileSystemImportFormatSupportQuery/EditorFileSystemImportFormatSupportQuery.h"
#include "py4godot/cppclasses/ResourceImporter/ResourceImporter.h"
#include "py4godot/cppclasses/EditorImportPlugin/EditorImportPlugin.h"
#include "py4godot/cppclasses/ResourceImporterBMFont/ResourceImporterBMFont.h"
#include "py4godot/cppclasses/ResourceImporterBitMap/ResourceImporterBitMap.h"
#include "py4godot/cppclasses/ResourceImporterCSVTranslation/ResourceImporterCSVTranslation.h"
#include "py4godot/cppclasses/ResourceImporterDynamicFont/ResourceImporterDynamicFont.h"
#include "py4godot/cppclasses/ResourceImporterImage/ResourceImporterImage.h"
#include "py4godot/cppclasses/ResourceImporterImageFont/ResourceImporterImageFont.h"
#include "py4godot/cppclasses/ResourceImporterLayeredTexture/ResourceImporterLayeredTexture.h"
#include "py4godot/cppclasses/ResourceImporterMP3/ResourceImporterMP3.h"
#include "py4godot/cppclasses/ResourceImporterOBJ/ResourceImporterOBJ.h"
#include "py4godot/cppclasses/ResourceImporterOggVorbis/ResourceImporterOggVorbis.h"
#include "py4godot/cppclasses/ResourceImporterScene/ResourceImporterScene.h"
#include "py4godot/cppclasses/ResourceImporterShaderFile/ResourceImporterShaderFile.h"
#include "py4godot/cppclasses/ResourceImporterTexture/ResourceImporterTexture.h"
#include "py4godot/cppclasses/ResourceImporterTextureAtlas/ResourceImporterTextureAtlas.h"
#include "py4godot/cppclasses/ResourceImporterWAV/ResourceImporterWAV.h"
#include "py4godot/cppclasses/EditorInspectorPlugin/EditorInspectorPlugin.h"
#include "py4godot/cppclasses/Node3DGizmo/Node3DGizmo.h"
#include "py4godot/cppclasses/EditorNode3DGizmo/EditorNode3DGizmo.h"
#include "py4godot/cppclasses/EditorResourceConversionPlugin/EditorResourceConversionPlugin.h"
#include "py4godot/cppclasses/EditorResourcePreviewGenerator/EditorResourcePreviewGenerator.h"
#include "py4godot/cppclasses/EditorResourceTooltipPlugin/EditorResourceTooltipPlugin.h"
#include "py4godot/cppclasses/EditorSceneFormatImporter/EditorSceneFormatImporter.h"
#include "py4godot/cppclasses/EditorSceneFormatImporterBlend/EditorSceneFormatImporterBlend.h"
#include "py4godot/cppclasses/EditorSceneFormatImporterFBX2GLTF/EditorSceneFormatImporterFBX2GLTF.h"
#include "py4godot/cppclasses/EditorSceneFormatImporterGLTF/EditorSceneFormatImporterGLTF.h"
#include "py4godot/cppclasses/EditorSceneFormatImporterUFBX/EditorSceneFormatImporterUFBX.h"
#include "py4godot/cppclasses/EditorScenePostImport/EditorScenePostImport.h"
#include "py4godot/cppclasses/EditorScenePostImportPlugin/EditorScenePostImportPlugin.h"
#include "py4godot/cppclasses/EditorScript/EditorScript.h"
#include "py4godot/cppclasses/EditorTranslationParserPlugin/EditorTranslationParserPlugin.h"
#include "py4godot/cppclasses/EncodedObjectAsID/EncodedObjectAsID.h"
#include "py4godot/cppclasses/EngineProfiler/EngineProfiler.h"
#include "py4godot/cppclasses/Expression/Expression.h"
#include "py4godot/cppclasses/FileAccess/FileAccess.h"
#include "py4godot/cppclasses/HMACContext/HMACContext.h"
#include "py4godot/cppclasses/HTTPClient/HTTPClient.h"
#include "py4godot/cppclasses/HashingContext/HashingContext.h"
#include "py4godot/cppclasses/ImageFormatLoader/ImageFormatLoader.h"
#include "py4godot/cppclasses/ImageFormatLoaderExtension/ImageFormatLoaderExtension.h"
#include "py4godot/cppclasses/JavaClass/JavaClass.h"
#include "py4godot/cppclasses/JavaScriptObject/JavaScriptObject.h"
#include "py4godot/cppclasses/KinematicCollision2D/KinematicCollision2D.h"
#include "py4godot/cppclasses/KinematicCollision3D/KinematicCollision3D.h"
#include "py4godot/cppclasses/Lightmapper/Lightmapper.h"
#include "py4godot/cppclasses/LightmapperRD/LightmapperRD.h"
#include "py4godot/cppclasses/MeshConvexDecompositionSettings/MeshConvexDecompositionSettings.h"
#include "py4godot/cppclasses/MeshDataTool/MeshDataTool.h"
#include "py4godot/cppclasses/XRInterface/XRInterface.h"
#include "py4godot/cppclasses/MobileVRInterface/MobileVRInterface.h"
#include "py4godot/cppclasses/OpenXRInterface/OpenXRInterface.h"
#include "py4godot/cppclasses/WebXRInterface/WebXRInterface.h"
#include "py4godot/cppclasses/XRInterfaceExtension/XRInterfaceExtension.h"
#include "py4godot/cppclasses/MultiplayerAPI/MultiplayerAPI.h"
#include "py4godot/cppclasses/MultiplayerAPIExtension/MultiplayerAPIExtension.h"
#include "py4godot/cppclasses/SceneMultiplayer/SceneMultiplayer.h"
#include "py4godot/cppclasses/Mutex/Mutex.h"
#include "py4godot/cppclasses/NavigationPathQueryParameters2D/NavigationPathQueryParameters2D.h"
#include "py4godot/cppclasses/NavigationPathQueryParameters3D/NavigationPathQueryParameters3D.h"
#include "py4godot/cppclasses/NavigationPathQueryResult2D/NavigationPathQueryResult2D.h"
#include "py4godot/cppclasses/NavigationPathQueryResult3D/NavigationPathQueryResult3D.h"
#include "py4godot/cppclasses/OggPacketSequencePlayback/OggPacketSequencePlayback.h"
#include "py4godot/cppclasses/OpenXRAPIExtension/OpenXRAPIExtension.h"
#include "py4godot/cppclasses/PCKPacker/PCKPacker.h"
#include "py4godot/cppclasses/PackedDataContainerRef/PackedDataContainerRef.h"
#include "py4godot/cppclasses/PhysicsPointQueryParameters2D/PhysicsPointQueryParameters2D.h"
#include "py4godot/cppclasses/PhysicsPointQueryParameters3D/PhysicsPointQueryParameters3D.h"
#include "py4godot/cppclasses/PhysicsRayQueryParameters2D/PhysicsRayQueryParameters2D.h"
#include "py4godot/cppclasses/PhysicsRayQueryParameters3D/PhysicsRayQueryParameters3D.h"
#include "py4godot/cppclasses/PhysicsShapeQueryParameters2D/PhysicsShapeQueryParameters2D.h"
#include "py4godot/cppclasses/PhysicsShapeQueryParameters3D/PhysicsShapeQueryParameters3D.h"
#include "py4godot/cppclasses/PhysicsTestMotionParameters2D/PhysicsTestMotionParameters2D.h"
#include "py4godot/cppclasses/PhysicsTestMotionParameters3D/PhysicsTestMotionParameters3D.h"
#include "py4godot/cppclasses/PhysicsTestMotionResult2D/PhysicsTestMotionResult2D.h"
#include "py4godot/cppclasses/PhysicsTestMotionResult3D/PhysicsTestMotionResult3D.h"
#include "py4godot/cppclasses/RDAttachmentFormat/RDAttachmentFormat.h"
#include "py4godot/cppclasses/RDFramebufferPass/RDFramebufferPass.h"
#include "py4godot/cppclasses/RDPipelineColorBlendState/RDPipelineColorBlendState.h"
#include "py4godot/cppclasses/RDPipelineColorBlendStateAttachment/RDPipelineColorBlendStateAttachment.h"
#include "py4godot/cppclasses/RDPipelineDepthStencilState/RDPipelineDepthStencilState.h"
#include "py4godot/cppclasses/RDPipelineMultisampleState/RDPipelineMultisampleState.h"
#include "py4godot/cppclasses/RDPipelineRasterizationState/RDPipelineRasterizationState.h"
#include "py4godot/cppclasses/RDPipelineSpecializationConstant/RDPipelineSpecializationConstant.h"
#include "py4godot/cppclasses/RDSamplerState/RDSamplerState.h"
#include "py4godot/cppclasses/RDShaderSource/RDShaderSource.h"
#include "py4godot/cppclasses/RDTextureFormat/RDTextureFormat.h"
#include "py4godot/cppclasses/RDTextureView/RDTextureView.h"
#include "py4godot/cppclasses/RDUniform/RDUniform.h"
#include "py4godot/cppclasses/RDVertexAttribute/RDVertexAttribute.h"
#include "py4godot/cppclasses/RandomNumberGenerator/RandomNumberGenerator.h"
#include "py4godot/cppclasses/RegEx/RegEx.h"
#include "py4godot/cppclasses/RegExMatch/RegExMatch.h"
#include "py4godot/cppclasses/RenderSceneBuffers/RenderSceneBuffers.h"
#include "py4godot/cppclasses/RenderSceneBuffersExtension/RenderSceneBuffersExtension.h"
#include "py4godot/cppclasses/RenderSceneBuffersRD/RenderSceneBuffersRD.h"
#include "py4godot/cppclasses/RenderSceneBuffersConfiguration/RenderSceneBuffersConfiguration.h"
#include "py4godot/cppclasses/ResourceFormatLoader/ResourceFormatLoader.h"
#include "py4godot/cppclasses/ResourceFormatSaver/ResourceFormatSaver.h"
#include "py4godot/cppclasses/SceneState/SceneState.h"
#include "py4godot/cppclasses/SceneTreeTimer/SceneTreeTimer.h"
#include "py4godot/cppclasses/Semaphore/Semaphore.h"
#include "py4godot/cppclasses/SkinReference/SkinReference.h"
#include "py4godot/cppclasses/StreamPeer/StreamPeer.h"
#include "py4godot/cppclasses/StreamPeerBuffer/StreamPeerBuffer.h"
#include "py4godot/cppclasses/StreamPeerExtension/StreamPeerExtension.h"
#include "py4godot/cppclasses/StreamPeerGZIP/StreamPeerGZIP.h"
#include "py4godot/cppclasses/StreamPeerTCP/StreamPeerTCP.h"
#include "py4godot/cppclasses/StreamPeerTLS/StreamPeerTLS.h"
#include "py4godot/cppclasses/SurfaceTool/SurfaceTool.h"
#include "py4godot/cppclasses/TCPServer/TCPServer.h"
#include "py4godot/cppclasses/TLSOptions/TLSOptions.h"
#include "py4godot/cppclasses/TextLine/TextLine.h"
#include "py4godot/cppclasses/TextParagraph/TextParagraph.h"
#include "py4godot/cppclasses/TextServer/TextServer.h"
#include "py4godot/cppclasses/TextServerExtension/TextServerExtension.h"
#include "py4godot/cppclasses/TextServerAdvanced/TextServerAdvanced.h"
#include "py4godot/cppclasses/TextServerDummy/TextServerDummy.h"
#include "py4godot/cppclasses/Thread/Thread.h"
#include "py4godot/cppclasses/TriangleMesh/TriangleMesh.h"
#include "py4godot/cppclasses/Tween/Tween.h"
#include "py4godot/cppclasses/UDPServer/UDPServer.h"
#include "py4godot/cppclasses/UPNP/UPNP.h"
#include "py4godot/cppclasses/UPNPDevice/UPNPDevice.h"
#include "py4godot/cppclasses/WeakRef/WeakRef.h"
#include "py4godot/cppclasses/WebRTCPeerConnection/WebRTCPeerConnection.h"
#include "py4godot/cppclasses/WebRTCPeerConnectionExtension/WebRTCPeerConnectionExtension.h"
#include "py4godot/cppclasses/XMLParser/XMLParser.h"
#include "py4godot/cppclasses/XRTracker/XRTracker.h"
#include "py4godot/cppclasses/XRPositionalTracker/XRPositionalTracker.h"
#include "py4godot/cppclasses/XRBodyTracker/XRBodyTracker.h"
#include "py4godot/cppclasses/XRControllerTracker/XRControllerTracker.h"
#include "py4godot/cppclasses/XRHandTracker/XRHandTracker.h"
#include "py4godot/cppclasses/XRFaceTracker/XRFaceTracker.h"
#include "py4godot/cppclasses/XRPose/XRPose.h"
#include "py4godot/cppclasses/ZIPPacker/ZIPPacker.h"
#include "py4godot/cppclasses/ZIPReader/ZIPReader.h"
#include "py4godot/cppclasses/Node/Node.h"
#include "py4godot/cppclasses/Viewport/Viewport.h"
#include "py4godot/cppclasses/Window/Window.h"
#include "py4godot/cppclasses/AcceptDialog/AcceptDialog.h"
#include "py4godot/cppclasses/ConfirmationDialog/ConfirmationDialog.h"
#include "py4godot/cppclasses/EditorCommandPalette/EditorCommandPalette.h"
#include "py4godot/cppclasses/EditorFileDialog/EditorFileDialog.h"
#include "py4godot/cppclasses/FileDialog/FileDialog.h"
#include "py4godot/cppclasses/ScriptCreateDialog/ScriptCreateDialog.h"
#include "py4godot/cppclasses/Popup/Popup.h"
#include "py4godot/cppclasses/PopupMenu/PopupMenu.h"
#include "py4godot/cppclasses/PopupPanel/PopupPanel.h"
#include "py4godot/cppclasses/SubViewport/SubViewport.h"
#include "py4godot/cppclasses/CanvasItem/CanvasItem.h"
#include "py4godot/cppclasses/Node2D/Node2D.h"
#include "py4godot/cppclasses/CollisionObject2D/CollisionObject2D.h"
#include "py4godot/cppclasses/PhysicsBody2D/PhysicsBody2D.h"
#include "py4godot/cppclasses/StaticBody2D/StaticBody2D.h"
#include "py4godot/cppclasses/AnimatableBody2D/AnimatableBody2D.h"
#include "py4godot/cppclasses/CharacterBody2D/CharacterBody2D.h"
#include "py4godot/cppclasses/RigidBody2D/RigidBody2D.h"
#include "py4godot/cppclasses/PhysicalBone2D/PhysicalBone2D.h"
#include "py4godot/cppclasses/Area2D/Area2D.h"
#include "py4godot/cppclasses/AnimatedSprite2D/AnimatedSprite2D.h"
#include "py4godot/cppclasses/AudioListener2D/AudioListener2D.h"
#include "py4godot/cppclasses/AudioStreamPlayer2D/AudioStreamPlayer2D.h"
#include "py4godot/cppclasses/BackBufferCopy/BackBufferCopy.h"
#include "py4godot/cppclasses/Bone2D/Bone2D.h"
#include "py4godot/cppclasses/CPUParticles2D/CPUParticles2D.h"
#include "py4godot/cppclasses/Camera2D/Camera2D.h"
#include "py4godot/cppclasses/CanvasGroup/CanvasGroup.h"
#include "py4godot/cppclasses/CanvasModulate/CanvasModulate.h"
#include "py4godot/cppclasses/CollisionPolygon2D/CollisionPolygon2D.h"
#include "py4godot/cppclasses/CollisionShape2D/CollisionShape2D.h"
#include "py4godot/cppclasses/Joint2D/Joint2D.h"
#include "py4godot/cppclasses/DampedSpringJoint2D/DampedSpringJoint2D.h"
#include "py4godot/cppclasses/GrooveJoint2D/GrooveJoint2D.h"
#include "py4godot/cppclasses/PinJoint2D/PinJoint2D.h"
#include "py4godot/cppclasses/Light2D/Light2D.h"
#include "py4godot/cppclasses/DirectionalLight2D/DirectionalLight2D.h"
#include "py4godot/cppclasses/PointLight2D/PointLight2D.h"
#include "py4godot/cppclasses/GPUParticles2D/GPUParticles2D.h"
#include "py4godot/cppclasses/LightOccluder2D/LightOccluder2D.h"
#include "py4godot/cppclasses/Line2D/Line2D.h"
#include "py4godot/cppclasses/Marker2D/Marker2D.h"
#include "py4godot/cppclasses/MeshInstance2D/MeshInstance2D.h"
#include "py4godot/cppclasses/MultiMeshInstance2D/MultiMeshInstance2D.h"
#include "py4godot/cppclasses/NavigationLink2D/NavigationLink2D.h"
#include "py4godot/cppclasses/NavigationObstacle2D/NavigationObstacle2D.h"
#include "py4godot/cppclasses/NavigationRegion2D/NavigationRegion2D.h"
#include "py4godot/cppclasses/Parallax2D/Parallax2D.h"
#include "py4godot/cppclasses/ParallaxLayer/ParallaxLayer.h"
#include "py4godot/cppclasses/Path2D/Path2D.h"
#include "py4godot/cppclasses/PathFollow2D/PathFollow2D.h"
#include "py4godot/cppclasses/Polygon2D/Polygon2D.h"
#include "py4godot/cppclasses/RayCast2D/RayCast2D.h"
#include "py4godot/cppclasses/RemoteTransform2D/RemoteTransform2D.h"
#include "py4godot/cppclasses/ShapeCast2D/ShapeCast2D.h"
#include "py4godot/cppclasses/Skeleton2D/Skeleton2D.h"
#include "py4godot/cppclasses/Sprite2D/Sprite2D.h"
#include "py4godot/cppclasses/TileMap/TileMap.h"
#include "py4godot/cppclasses/TileMapLayer/TileMapLayer.h"
#include "py4godot/cppclasses/TouchScreenButton/TouchScreenButton.h"
#include "py4godot/cppclasses/VisibleOnScreenNotifier2D/VisibleOnScreenNotifier2D.h"
#include "py4godot/cppclasses/VisibleOnScreenEnabler2D/VisibleOnScreenEnabler2D.h"
#include "py4godot/cppclasses/Control/Control.h"
#include "py4godot/cppclasses/Container/Container.h"
#include "py4godot/cppclasses/AspectRatioContainer/AspectRatioContainer.h"
#include "py4godot/cppclasses/BoxContainer/BoxContainer.h"
#include "py4godot/cppclasses/VBoxContainer/VBoxContainer.h"
#include "py4godot/cppclasses/ColorPicker/ColorPicker.h"
#include "py4godot/cppclasses/FileSystemDock/FileSystemDock.h"
#include "py4godot/cppclasses/ScriptEditorBase/ScriptEditorBase.h"
#include "py4godot/cppclasses/HBoxContainer/HBoxContainer.h"
#include "py4godot/cppclasses/EditorResourcePicker/EditorResourcePicker.h"
#include "py4godot/cppclasses/EditorScriptPicker/EditorScriptPicker.h"
#include "py4godot/cppclasses/CenterContainer/CenterContainer.h"
#include "py4godot/cppclasses/ScrollContainer/ScrollContainer.h"
#include "py4godot/cppclasses/EditorInspector/EditorInspector.h"
#include "py4godot/cppclasses/EditorProperty/EditorProperty.h"
#include "py4godot/cppclasses/FlowContainer/FlowContainer.h"
#include "py4godot/cppclasses/HFlowContainer/HFlowContainer.h"
#include "py4godot/cppclasses/VFlowContainer/VFlowContainer.h"
#include "py4godot/cppclasses/GraphElement/GraphElement.h"
#include "py4godot/cppclasses/GraphFrame/GraphFrame.h"
#include "py4godot/cppclasses/GraphNode/GraphNode.h"
#include "py4godot/cppclasses/GridContainer/GridContainer.h"
#include "py4godot/cppclasses/SplitContainer/SplitContainer.h"
#include "py4godot/cppclasses/HSplitContainer/HSplitContainer.h"
#include "py4godot/cppclasses/VSplitContainer/VSplitContainer.h"
#include "py4godot/cppclasses/MarginContainer/MarginContainer.h"
#include "py4godot/cppclasses/PanelContainer/PanelContainer.h"
#include "py4godot/cppclasses/ScriptEditor/ScriptEditor.h"
#include "py4godot/cppclasses/SubViewportContainer/SubViewportContainer.h"
#include "py4godot/cppclasses/TabContainer/TabContainer.h"
#include "py4godot/cppclasses/BaseButton/BaseButton.h"
#include "py4godot/cppclasses/Button/Button.h"
#include "py4godot/cppclasses/CheckBox/CheckBox.h"
#include "py4godot/cppclasses/CheckButton/CheckButton.h"
#include "py4godot/cppclasses/ColorPickerButton/ColorPickerButton.h"
#include "py4godot/cppclasses/MenuButton/MenuButton.h"
#include "py4godot/cppclasses/OptionButton/OptionButton.h"
#include "py4godot/cppclasses/LinkButton/LinkButton.h"
#include "py4godot/cppclasses/TextureButton/TextureButton.h"
#include "py4godot/cppclasses/TextEdit/TextEdit.h"
#include "py4godot/cppclasses/CodeEdit/CodeEdit.h"
#include "py4godot/cppclasses/ColorRect/ColorRect.h"
#include "py4godot/cppclasses/Range/Range.h"
#include "py4godot/cppclasses/EditorSpinSlider/EditorSpinSlider.h"
#include "py4godot/cppclasses/ScrollBar/ScrollBar.h"
#include "py4godot/cppclasses/HScrollBar/HScrollBar.h"
#include "py4godot/cppclasses/VScrollBar/VScrollBar.h"
#include "py4godot/cppclasses/Slider/Slider.h"
#include "py4godot/cppclasses/HSlider/HSlider.h"
#include "py4godot/cppclasses/VSlider/VSlider.h"
#include "py4godot/cppclasses/ProgressBar/ProgressBar.h"
#include "py4godot/cppclasses/SpinBox/SpinBox.h"
#include "py4godot/cppclasses/TextureProgressBar/TextureProgressBar.h"
#include "py4godot/cppclasses/GraphEdit/GraphEdit.h"
#include "py4godot/cppclasses/Separator/Separator.h"
#include "py4godot/cppclasses/HSeparator/HSeparator.h"
#include "py4godot/cppclasses/VSeparator/VSeparator.h"
#include "py4godot/cppclasses/ItemList/ItemList.h"
#include "py4godot/cppclasses/Label/Label.h"
#include "py4godot/cppclasses/LineEdit/LineEdit.h"
#include "py4godot/cppclasses/MenuBar/MenuBar.h"
#include "py4godot/cppclasses/NinePatchRect/NinePatchRect.h"
#include "py4godot/cppclasses/Panel/Panel.h"
#include "py4godot/cppclasses/ReferenceRect/ReferenceRect.h"
#include "py4godot/cppclasses/RichTextLabel/RichTextLabel.h"
#include "py4godot/cppclasses/TabBar/TabBar.h"
#include "py4godot/cppclasses/TextureRect/TextureRect.h"
#include "py4godot/cppclasses/Tree/Tree.h"
#include "py4godot/cppclasses/VideoStreamPlayer/VideoStreamPlayer.h"
#include "py4godot/cppclasses/Node3D/Node3D.h"
#include "py4godot/cppclasses/CollisionObject3D/CollisionObject3D.h"
#include "py4godot/cppclasses/PhysicsBody3D/PhysicsBody3D.h"
#include "py4godot/cppclasses/StaticBody3D/StaticBody3D.h"
#include "py4godot/cppclasses/AnimatableBody3D/AnimatableBody3D.h"
#include "py4godot/cppclasses/CharacterBody3D/CharacterBody3D.h"
#include "py4godot/cppclasses/PhysicalBone3D/PhysicalBone3D.h"
#include "py4godot/cppclasses/RigidBody3D/RigidBody3D.h"
#include "py4godot/cppclasses/VehicleBody3D/VehicleBody3D.h"
#include "py4godot/cppclasses/Area3D/Area3D.h"
#include "py4godot/cppclasses/VisualInstance3D/VisualInstance3D.h"
#include "py4godot/cppclasses/GeometryInstance3D/GeometryInstance3D.h"
#include "py4godot/cppclasses/SpriteBase3D/SpriteBase3D.h"
#include "py4godot/cppclasses/AnimatedSprite3D/AnimatedSprite3D.h"
#include "py4godot/cppclasses/Sprite3D/Sprite3D.h"
#include "py4godot/cppclasses/CPUParticles3D/CPUParticles3D.h"
#include "py4godot/cppclasses/CSGShape3D/CSGShape3D.h"
#include "py4godot/cppclasses/CSGPrimitive3D/CSGPrimitive3D.h"
#include "py4godot/cppclasses/CSGBox3D/CSGBox3D.h"
#include "py4godot/cppclasses/CSGCylinder3D/CSGCylinder3D.h"
#include "py4godot/cppclasses/CSGMesh3D/CSGMesh3D.h"
#include "py4godot/cppclasses/CSGPolygon3D/CSGPolygon3D.h"
#include "py4godot/cppclasses/CSGSphere3D/CSGSphere3D.h"
#include "py4godot/cppclasses/CSGTorus3D/CSGTorus3D.h"
#include "py4godot/cppclasses/CSGCombiner3D/CSGCombiner3D.h"
#include "py4godot/cppclasses/GPUParticles3D/GPUParticles3D.h"
#include "py4godot/cppclasses/Label3D/Label3D.h"
#include "py4godot/cppclasses/MeshInstance3D/MeshInstance3D.h"
#include "py4godot/cppclasses/SoftBody3D/SoftBody3D.h"
#include "py4godot/cppclasses/MultiMeshInstance3D/MultiMeshInstance3D.h"
#include "py4godot/cppclasses/Decal/Decal.h"
#include "py4godot/cppclasses/Light3D/Light3D.h"
#include "py4godot/cppclasses/DirectionalLight3D/DirectionalLight3D.h"
#include "py4godot/cppclasses/OmniLight3D/OmniLight3D.h"
#include "py4godot/cppclasses/SpotLight3D/SpotLight3D.h"
#include "py4godot/cppclasses/FogVolume/FogVolume.h"
#include "py4godot/cppclasses/GPUParticlesAttractor3D/GPUParticlesAttractor3D.h"
#include "py4godot/cppclasses/GPUParticlesAttractorBox3D/GPUParticlesAttractorBox3D.h"
#include "py4godot/cppclasses/GPUParticlesAttractorSphere3D/GPUParticlesAttractorSphere3D.h"
#include "py4godot/cppclasses/GPUParticlesAttractorVectorField3D/GPUParticlesAttractorVectorField3D.h"
#include "py4godot/cppclasses/GPUParticlesCollision3D/GPUParticlesCollision3D.h"
#include "py4godot/cppclasses/GPUParticlesCollisionBox3D/GPUParticlesCollisionBox3D.h"
#include "py4godot/cppclasses/GPUParticlesCollisionHeightField3D/GPUParticlesCollisionHeightField3D.h"
#include "py4godot/cppclasses/GPUParticlesCollisionSDF3D/GPUParticlesCollisionSDF3D.h"
#include "py4godot/cppclasses/GPUParticlesCollisionSphere3D/GPUParticlesCollisionSphere3D.h"
#include "py4godot/cppclasses/LightmapGI/LightmapGI.h"
#include "py4godot/cppclasses/OccluderInstance3D/OccluderInstance3D.h"
#include "py4godot/cppclasses/ReflectionProbe/ReflectionProbe.h"
#include "py4godot/cppclasses/RootMotionView/RootMotionView.h"
#include "py4godot/cppclasses/VisibleOnScreenNotifier3D/VisibleOnScreenNotifier3D.h"
#include "py4godot/cppclasses/VisibleOnScreenEnabler3D/VisibleOnScreenEnabler3D.h"
#include "py4godot/cppclasses/VoxelGI/VoxelGI.h"
#include "py4godot/cppclasses/AudioListener3D/AudioListener3D.h"
#include "py4godot/cppclasses/AudioStreamPlayer3D/AudioStreamPlayer3D.h"
#include "py4godot/cppclasses/BoneAttachment3D/BoneAttachment3D.h"
#include "py4godot/cppclasses/Camera3D/Camera3D.h"
#include "py4godot/cppclasses/XRCamera3D/XRCamera3D.h"
#include "py4godot/cppclasses/CollisionPolygon3D/CollisionPolygon3D.h"
#include "py4godot/cppclasses/CollisionShape3D/CollisionShape3D.h"
#include "py4godot/cppclasses/Joint3D/Joint3D.h"
#include "py4godot/cppclasses/ConeTwistJoint3D/ConeTwistJoint3D.h"
#include "py4godot/cppclasses/Generic6DOFJoint3D/Generic6DOFJoint3D.h"
#include "py4godot/cppclasses/HingeJoint3D/HingeJoint3D.h"
#include "py4godot/cppclasses/PinJoint3D/PinJoint3D.h"
#include "py4godot/cppclasses/SliderJoint3D/SliderJoint3D.h"
#include "py4godot/cppclasses/GridMap/GridMap.h"
#include "py4godot/cppclasses/ImporterMeshInstance3D/ImporterMeshInstance3D.h"
#include "py4godot/cppclasses/LightmapProbe/LightmapProbe.h"
#include "py4godot/cppclasses/Marker3D/Marker3D.h"
#include "py4godot/cppclasses/NavigationLink3D/NavigationLink3D.h"
#include "py4godot/cppclasses/NavigationObstacle3D/NavigationObstacle3D.h"
#include "py4godot/cppclasses/NavigationRegion3D/NavigationRegion3D.h"
#include "py4godot/cppclasses/OpenXRCompositionLayer/OpenXRCompositionLayer.h"
#include "py4godot/cppclasses/OpenXRCompositionLayerCylinder/OpenXRCompositionLayerCylinder.h"
#include "py4godot/cppclasses/OpenXRCompositionLayerEquirect/OpenXRCompositionLayerEquirect.h"
#include "py4godot/cppclasses/OpenXRCompositionLayerQuad/OpenXRCompositionLayerQuad.h"
#include "py4godot/cppclasses/OpenXRHand/OpenXRHand.h"
#include "py4godot/cppclasses/Path3D/Path3D.h"
#include "py4godot/cppclasses/PathFollow3D/PathFollow3D.h"
#include "py4godot/cppclasses/SkeletonModifier3D/SkeletonModifier3D.h"
#include "py4godot/cppclasses/PhysicalBoneSimulator3D/PhysicalBoneSimulator3D.h"
#include "py4godot/cppclasses/SkeletonIK3D/SkeletonIK3D.h"
#include "py4godot/cppclasses/XRBodyModifier3D/XRBodyModifier3D.h"
#include "py4godot/cppclasses/XRHandModifier3D/XRHandModifier3D.h"
#include "py4godot/cppclasses/RayCast3D/RayCast3D.h"
#include "py4godot/cppclasses/RemoteTransform3D/RemoteTransform3D.h"
#include "py4godot/cppclasses/ShapeCast3D/ShapeCast3D.h"
#include "py4godot/cppclasses/Skeleton3D/Skeleton3D.h"
#include "py4godot/cppclasses/SpringArm3D/SpringArm3D.h"
#include "py4godot/cppclasses/VehicleWheel3D/VehicleWheel3D.h"
#include "py4godot/cppclasses/XRNode3D/XRNode3D.h"
#include "py4godot/cppclasses/XRAnchor3D/XRAnchor3D.h"
#include "py4godot/cppclasses/XRController3D/XRController3D.h"
#include "py4godot/cppclasses/XRFaceModifier3D/XRFaceModifier3D.h"
#include "py4godot/cppclasses/XROrigin3D/XROrigin3D.h"
#include "py4godot/cppclasses/AnimationMixer/AnimationMixer.h"
#include "py4godot/cppclasses/AnimationPlayer/AnimationPlayer.h"
#include "py4godot/cppclasses/AnimationTree/AnimationTree.h"
#include "py4godot/cppclasses/AudioStreamPlayer/AudioStreamPlayer.h"
#include "py4godot/cppclasses/CanvasLayer/CanvasLayer.h"
#include "py4godot/cppclasses/ParallaxBackground/ParallaxBackground.h"
#include "py4godot/cppclasses/EditorFileSystem/EditorFileSystem.h"
#include "py4godot/cppclasses/EditorPlugin/EditorPlugin.h"
#include "py4godot/cppclasses/EditorResourcePreview/EditorResourcePreview.h"
#include "py4godot/cppclasses/HTTPRequest/HTTPRequest.h"
#include "py4godot/cppclasses/InstancePlaceholder/InstancePlaceholder.h"
#include "py4godot/cppclasses/MissingNode/MissingNode.h"
#include "py4godot/cppclasses/MultiplayerSpawner/MultiplayerSpawner.h"
#include "py4godot/cppclasses/MultiplayerSynchronizer/MultiplayerSynchronizer.h"
#include "py4godot/cppclasses/NavigationAgent2D/NavigationAgent2D.h"
#include "py4godot/cppclasses/NavigationAgent3D/NavigationAgent3D.h"
#include "py4godot/cppclasses/ResourcePreloader/ResourcePreloader.h"
#include "py4godot/cppclasses/ShaderGlobalsOverride/ShaderGlobalsOverride.h"
#include "py4godot/cppclasses/StatusIndicator/StatusIndicator.h"
#include "py4godot/cppclasses/Timer/Timer.h"
#include "py4godot/cppclasses/WorldEnvironment/WorldEnvironment.h"
#include "py4godot/cppclasses/AudioServer/AudioServer.h"
#include "py4godot/cppclasses/CameraServer/CameraServer.h"
#include "py4godot/cppclasses/ClassDB/ClassDB.h"
#include "py4godot/cppclasses/DisplayServer/DisplayServer.h"
#include "py4godot/cppclasses/EditorFileSystemDirectory/EditorFileSystemDirectory.h"
#include "py4godot/cppclasses/EditorInterface/EditorInterface.h"
#include "py4godot/cppclasses/EditorPaths/EditorPaths.h"
#include "py4godot/cppclasses/EditorSelection/EditorSelection.h"
#include "py4godot/cppclasses/EditorUndoRedoManager/EditorUndoRedoManager.h"
#include "py4godot/cppclasses/EditorVCSInterface/EditorVCSInterface.h"
#include "py4godot/cppclasses/Engine/Engine.h"
#include "py4godot/cppclasses/EngineDebugger/EngineDebugger.h"
#include "py4godot/cppclasses/FramebufferCacheRD/FramebufferCacheRD.h"
#include "py4godot/cppclasses/GDExtensionManager/GDExtensionManager.h"
#include "py4godot/cppclasses/Geometry2D/Geometry2D.h"
#include "py4godot/cppclasses/Geometry3D/Geometry3D.h"
#include "py4godot/cppclasses/IP/IP.h"
#include "py4godot/cppclasses/Input/Input.h"
#include "py4godot/cppclasses/InputMap/InputMap.h"
#include "py4godot/cppclasses/JNISingleton/JNISingleton.h"
#include "py4godot/cppclasses/JSONRPC/JSONRPC.h"
#include "py4godot/cppclasses/JavaClassWrapper/JavaClassWrapper.h"
#include "py4godot/cppclasses/JavaScriptBridge/JavaScriptBridge.h"
#include "py4godot/cppclasses/MainLoop/MainLoop.h"
#include "py4godot/cppclasses/SceneTree/SceneTree.h"
#include "py4godot/cppclasses/Marshalls/Marshalls.h"
#include "py4godot/cppclasses/MovieWriter/MovieWriter.h"
#include "py4godot/cppclasses/NativeMenu/NativeMenu.h"
#include "py4godot/cppclasses/NavigationMeshGenerator/NavigationMeshGenerator.h"
#include "py4godot/cppclasses/NavigationServer2D/NavigationServer2D.h"
#include "py4godot/cppclasses/NavigationServer3D/NavigationServer3D.h"
#include "py4godot/cppclasses/OS/OS.h"
#include "py4godot/cppclasses/OpenXRExtensionWrapperExtension/OpenXRExtensionWrapperExtension.h"
#include "py4godot/cppclasses/OpenXRInteractionProfileMetadata/OpenXRInteractionProfileMetadata.h"
#include "py4godot/cppclasses/Performance/Performance.h"
#include "py4godot/cppclasses/PhysicsDirectBodyState2D/PhysicsDirectBodyState2D.h"
#include "py4godot/cppclasses/PhysicsDirectBodyState2DExtension/PhysicsDirectBodyState2DExtension.h"
#include "py4godot/cppclasses/PhysicsDirectBodyState3D/PhysicsDirectBodyState3D.h"
#include "py4godot/cppclasses/PhysicsDirectBodyState3DExtension/PhysicsDirectBodyState3DExtension.h"
#include "py4godot/cppclasses/PhysicsDirectSpaceState2D/PhysicsDirectSpaceState2D.h"
#include "py4godot/cppclasses/PhysicsDirectSpaceState2DExtension/PhysicsDirectSpaceState2DExtension.h"
#include "py4godot/cppclasses/PhysicsDirectSpaceState3D/PhysicsDirectSpaceState3D.h"
#include "py4godot/cppclasses/PhysicsDirectSpaceState3DExtension/PhysicsDirectSpaceState3DExtension.h"
#include "py4godot/cppclasses/PhysicsServer2D/PhysicsServer2D.h"
#include "py4godot/cppclasses/PhysicsServer2DExtension/PhysicsServer2DExtension.h"
#include "py4godot/cppclasses/PhysicsServer2DManager/PhysicsServer2DManager.h"
#include "py4godot/cppclasses/PhysicsServer3D/PhysicsServer3D.h"
#include "py4godot/cppclasses/PhysicsServer3DExtension/PhysicsServer3DExtension.h"
#include "py4godot/cppclasses/PhysicsServer3DManager/PhysicsServer3DManager.h"
#include "py4godot/cppclasses/PhysicsServer3DRenderingServerHandler/PhysicsServer3DRenderingServerHandler.h"
#include "py4godot/cppclasses/ProjectSettings/ProjectSettings.h"
#include "py4godot/cppclasses/RenderData/RenderData.h"
#include "py4godot/cppclasses/RenderDataExtension/RenderDataExtension.h"
#include "py4godot/cppclasses/RenderDataRD/RenderDataRD.h"
#include "py4godot/cppclasses/RenderSceneData/RenderSceneData.h"
#include "py4godot/cppclasses/RenderSceneDataExtension/RenderSceneDataExtension.h"
#include "py4godot/cppclasses/RenderSceneDataRD/RenderSceneDataRD.h"
#include "py4godot/cppclasses/RenderingDevice/RenderingDevice.h"
#include "py4godot/cppclasses/RenderingServer/RenderingServer.h"
#include "py4godot/cppclasses/ResourceLoader/ResourceLoader.h"
#include "py4godot/cppclasses/ResourceSaver/ResourceSaver.h"
#include "py4godot/cppclasses/ResourceUID/ResourceUID.h"
#include "py4godot/cppclasses/ScriptLanguage/ScriptLanguage.h"
#include "py4godot/cppclasses/ScriptLanguageExtension/ScriptLanguageExtension.h"
#include "py4godot/cppclasses/TextServerManager/TextServerManager.h"
#include "py4godot/cppclasses/ThemeDB/ThemeDB.h"
#include "py4godot/cppclasses/TileData/TileData.h"
#include "py4godot/cppclasses/Time/Time.h"
#include "py4godot/cppclasses/TranslationServer/TranslationServer.h"
#include "py4godot/cppclasses/TreeItem/TreeItem.h"
#include "py4godot/cppclasses/UndoRedo/UndoRedo.h"
#include "py4godot/cppclasses/UniformSetCacheRD/UniformSetCacheRD.h"
#include "py4godot/cppclasses/WorkerThreadPool/WorkerThreadPool.h"
#include "py4godot/cppclasses/XRServer/XRServer.h"
#include "py4godot/cppclasses/XRVRS/XRVRS.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "venv/lib/python3.12/site-packages/Cython/Includes/cpython/contextvars.pxd",
  "py4godot/utils/instance_utils.pyx",
  "venv/lib/python3.12/site-packages/Cython/Includes/cpython/type.pxd",
  "venv/lib/python3.12/site-packages/Cython/Includes/cpython/bool.pxd",
  "venv/lib/python3.12/site-packages/Cython/Includes/cpython/complex.pxd",
  "py4godot/core/variant4/Variant4.pxd",
  "py4godot/classes/core.pxd",
  "py4godot/classes/Object/Object.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */

/* "py4godot/godot_bindings/binding4_godot4.pxd":23
 * ctypedef public void *GDExtensionPtr;
 * ctypedef void * GDExtensionMethodBindPtr;
 * ctypedef public int64_t GDExtensionInt;             # <<<<<<<<<<<<<<
 * ctypedef public uint8_t GDExtensionBool;
 * ctypedef public uint64_t GDObjectInstanceID;
 */
typedef int64_t GDExtensionInt;

/* "py4godot/godot_bindings/binding4_godot4.pxd":24
 * ctypedef void * GDExtensionMethodBindPtr;
 * ctypedef public int64_t GDExtensionInt;
 * ctypedef public uint8_t GDExtensionBool;             # <<<<<<<<<<<<<<
 * ctypedef public uint64_t GDObjectInstanceID;
 * ctypedef public void *GDExtensionClassLibraryPtr;
 */
typedef uint8_t GDExtensionBool;

/* "py4godot/godot_bindings/binding4_godot4.pxd":25
 * ctypedef public int64_t GDExtensionInt;
 * ctypedef public uint8_t GDExtensionBool;
 * ctypedef public uint64_t GDObjectInstanceID;             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionClassLibraryPtr;
 * ctypedef public void *GDExtensionClassInstancePtr;
 */
typedef uint64_t GDObjectInstanceID;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_8py4godot_4core_8variant4_8Variant4_PyVariant;
struct __pyx_obj_8py4godot_7classes_4core_String;
struct __pyx_obj_8py4godot_7classes_4core_Vector2;
struct __pyx_obj_8py4godot_7classes_4core_Vector2i;
struct __pyx_obj_8py4godot_7classes_4core_Rect2;
struct __pyx_obj_8py4godot_7classes_4core_Rect2i;
struct __pyx_obj_8py4godot_7classes_4core_Vector3;
struct __pyx_obj_8py4godot_7classes_4core_Vector3i;
struct __pyx_obj_8py4godot_7classes_4core_Transform2D;
struct __pyx_obj_8py4godot_7classes_4core_Vector4;
struct __pyx_obj_8py4godot_7classes_4core_Vector4i;
struct __pyx_obj_8py4godot_7classes_4core_Plane;
struct __pyx_obj_8py4godot_7classes_4core_Quaternion;
struct __pyx_obj_8py4godot_7classes_4core_AABB;
struct __pyx_obj_8py4godot_7classes_4core_Basis;
struct __pyx_obj_8py4godot_7classes_4core_Transform3D;
struct __pyx_obj_8py4godot_7classes_4core_Projection;
struct __pyx_obj_8py4godot_7classes_4core_Color;
struct __pyx_obj_8py4godot_7classes_4core_StringName;
struct __pyx_obj_8py4godot_7classes_4core_NodePath;
struct __pyx_obj_8py4godot_7classes_4core_RID;
struct __pyx_obj_8py4godot_7classes_4core_Callable;
struct __pyx_obj_8py4godot_7classes_4core_Signal;
struct __pyx_obj_8py4godot_7classes_4core_Dictionary;
struct __pyx_obj_8py4godot_7classes_4core_Array;
struct __pyx_obj_8py4godot_7classes_4core_PackedByteArray;
struct __pyx_obj_8py4godot_7classes_4core_PackedInt32Array;
struct __pyx_obj_8py4godot_7classes_4core_PackedInt64Array;
struct __pyx_obj_8py4godot_7classes_4core_PackedFloat32Array;
struct __pyx_obj_8py4godot_7classes_4core_PackedFloat64Array;
struct __pyx_obj_8py4godot_7classes_4core_PackedStringArray;
struct __pyx_obj_8py4godot_7classes_4core_PackedVector2Array;
struct __pyx_obj_8py4godot_7classes_4core_PackedVector3Array;
struct __pyx_obj_8py4godot_7classes_4core_PackedColorArray;
struct __pyx_obj_8py4godot_7classes_4core_PackedVector4Array;
struct __pyx_obj_8py4godot_7classes_6Object_6Object_Object;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};

/* "py4godot/godot_bindings/binding4_godot4.pxd":13
 * 
 * 
 * ctypedef public void *GDExtensionVariantPtr;             # <<<<<<<<<<<<<<
 * ctypedef public const void *GDExtensionConstVariantPtr;
 * ctypedef public void * GodotObject;
 */
typedef void *GDExtensionVariantPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":14
 * 
 * ctypedef public void *GDExtensionVariantPtr;
 * ctypedef public const void *GDExtensionConstVariantPtr;             # <<<<<<<<<<<<<<
 * ctypedef public void * GodotObject;
 * ctypedef public void *GDExtensionStringNamePtr;
 */
typedef void const *GDExtensionConstVariantPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":15
 * ctypedef public void *GDExtensionVariantPtr;
 * ctypedef public const void *GDExtensionConstVariantPtr;
 * ctypedef public void * GodotObject;             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionStringNamePtr;
 * ctypedef public void *GDExtensionStringPtr;
 */
typedef void *GodotObject;

/* "py4godot/godot_bindings/binding4_godot4.pxd":16
 * ctypedef public const void *GDExtensionConstVariantPtr;
 * ctypedef public void * GodotObject;
 * ctypedef public void *GDExtensionStringNamePtr;             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionStringPtr;
 * ctypedef public void *GDExtensionObjectPtr;
 */
typedef void *GDExtensionStringNamePtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":17
 * ctypedef public void * GodotObject;
 * ctypedef public void *GDExtensionStringNamePtr;
 * ctypedef public void *GDExtensionStringPtr;             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionObjectPtr;
 * ctypedef public const void *GDExtensionConstObjectPtr;
 */
typedef void *GDExtensionStringPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":18
 * ctypedef public void *GDExtensionStringNamePtr;
 * ctypedef public void *GDExtensionStringPtr;
 * ctypedef public void *GDExtensionObjectPtr;             # <<<<<<<<<<<<<<
 * ctypedef public const void *GDExtensionConstObjectPtr;
 * ctypedef public void *GDExtensionTypePtr;
 */
typedef void *GDExtensionObjectPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":19
 * ctypedef public void *GDExtensionStringPtr;
 * ctypedef public void *GDExtensionObjectPtr;
 * ctypedef public const void *GDExtensionConstObjectPtr;             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionTypePtr;
 * ctypedef public void *GDExtensionPtr;
 */
typedef void const *GDExtensionConstObjectPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":20
 * ctypedef public void *GDExtensionObjectPtr;
 * ctypedef public const void *GDExtensionConstObjectPtr;
 * ctypedef public void *GDExtensionTypePtr;             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionPtr;
 * ctypedef void * GDExtensionMethodBindPtr;
 */
typedef void *GDExtensionTypePtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":21
 * ctypedef public const void *GDExtensionConstObjectPtr;
 * ctypedef public void *GDExtensionTypePtr;
 * ctypedef public void *GDExtensionPtr;             # <<<<<<<<<<<<<<
 * ctypedef void * GDExtensionMethodBindPtr;
 * ctypedef public int64_t GDExtensionInt;
 */
typedef void *GDExtensionPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":22
 * ctypedef public void *GDExtensionTypePtr;
 * ctypedef public void *GDExtensionPtr;
 * ctypedef void * GDExtensionMethodBindPtr;             # <<<<<<<<<<<<<<
 * ctypedef public int64_t GDExtensionInt;
 * ctypedef public uint8_t GDExtensionBool;
 */
typedef void *__pyx_t_8py4godot_14godot_bindings_15binding4_godot4_GDExtensionMethodBindPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":26
 * ctypedef public uint8_t GDExtensionBool;
 * ctypedef public uint64_t GDObjectInstanceID;
 * ctypedef public void *GDExtensionClassLibraryPtr;             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionClassInstancePtr;
 * ctypedef public const void *GDExtensionConstTypePtr;
 */
typedef void *GDExtensionClassLibraryPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":27
 * ctypedef public uint64_t GDObjectInstanceID;
 * ctypedef public void *GDExtensionClassLibraryPtr;
 * ctypedef public void *GDExtensionClassInstancePtr;             # <<<<<<<<<<<<<<
 * ctypedef public const void *GDExtensionConstTypePtr;
 * ctypedef public const void *GDExtensionConstStringNamePtr;
 */
typedef void *GDExtensionClassInstancePtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":28
 * ctypedef public void *GDExtensionClassLibraryPtr;
 * ctypedef public void *GDExtensionClassInstancePtr;
 * ctypedef public const void *GDExtensionConstTypePtr;             # <<<<<<<<<<<<<<
 * ctypedef public const void *GDExtensionConstStringNamePtr;
 * ctypedef public const void *GDExtensionConstStringPtr;
 */
typedef void const *GDExtensionConstTypePtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":29
 * ctypedef public void *GDExtensionClassInstancePtr;
 * ctypedef public const void *GDExtensionConstTypePtr;
 * ctypedef public const void *GDExtensionConstStringNamePtr;             # <<<<<<<<<<<<<<
 * ctypedef public const void *GDExtensionConstStringPtr;
 * ctypedef public void *GDExtensionScriptInstanceDataPtr;
 */
typedef void const *GDExtensionConstStringNamePtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":30
 * ctypedef public const void *GDExtensionConstTypePtr;
 * ctypedef public const void *GDExtensionConstStringNamePtr;
 * ctypedef public const void *GDExtensionConstStringPtr;             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionScriptInstanceDataPtr;
 * ctypedef public void *GDExtensionScriptInstancePtr
 */
typedef void const *GDExtensionConstStringPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":31
 * ctypedef public const void *GDExtensionConstStringNamePtr;
 * ctypedef public const void *GDExtensionConstStringPtr;
 * ctypedef public void *GDExtensionScriptInstanceDataPtr;             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionScriptInstancePtr
 * ctypedef public void *GDExtensionRefPtr;
 */
typedef void *GDExtensionScriptInstanceDataPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":32
 * ctypedef public const void *GDExtensionConstStringPtr;
 * ctypedef public void *GDExtensionScriptInstanceDataPtr;
 * ctypedef public void *GDExtensionScriptInstancePtr             # <<<<<<<<<<<<<<
 * ctypedef public void *GDExtensionRefPtr;
 * ctypedef public const void *GDExtensionConstRefPtr;
 */
typedef void *GDExtensionScriptInstancePtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":33
 * ctypedef public void *GDExtensionScriptInstanceDataPtr;
 * ctypedef public void *GDExtensionScriptInstancePtr
 * ctypedef public void *GDExtensionRefPtr;             # <<<<<<<<<<<<<<
 * ctypedef public const void *GDExtensionConstRefPtr;
 * ctypedef void (*GDExtensionPtrSetter)(GDExtensionTypePtr p_base, GDExtensionConstTypePtr p_value);
 */
typedef void *GDExtensionRefPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":34
 * ctypedef public void *GDExtensionScriptInstancePtr
 * ctypedef public void *GDExtensionRefPtr;
 * ctypedef public const void *GDExtensionConstRefPtr;             # <<<<<<<<<<<<<<
 * ctypedef void (*GDExtensionPtrSetter)(GDExtensionTypePtr p_base, GDExtensionConstTypePtr p_value);
 * ctypedef void (*GDExtensionPtrGetter)(GDExtensionConstTypePtr p_base, GDExtensionTypePtr r_value);
 */
typedef void const *GDExtensionConstRefPtr;

/* "py4godot/godot_bindings/binding4_godot4.pxd":35
 * ctypedef public void *GDExtensionRefPtr;
 * ctypedef public const void *GDExtensionConstRefPtr;
 * ctypedef void (*GDExtensionPtrSetter)(GDExtensionTypePtr p_base, GDExtensionConstTypePtr p_value);             # <<<<<<<<<<<<<<
 * ctypedef void (*GDExtensionPtrGetter)(GDExtensionConstTypePtr p_base, GDExtensionTypePtr r_value);
 * ctypedef void (*GDExtensionPtrIndexedSetter)(GDExtensionTypePtr p_base, GDExtensionInt p_index, GDExtensionConstTypePtr p_value);
 */
typedef void (*__pyx_t_8py4godot_14godot_bindings_15binding4_godot4_GDExtensionPtrSetter)(GDExtensionTypePtr, GDExtensionConstTypePtr);

/* "py4godot/godot_bindings/binding4_godot4.pxd":36
 * ctypedef public const void *GDExtensionConstRefPtr;
 * ctypedef void (*GDExtensionPtrSetter)(GDExtensionTypePtr p_base, GDExtensionConstTypePtr p_value);
 * ctypedef void (*GDExtensionPtrGetter)(GDExtensionConstTypePtr p_base, GDExtensionTypePtr r_value);             # <<<<<<<<<<<<<<
 * ctypedef void (*GDExtensionPtrIndexedSetter)(GDExtensionTypePtr p_base, GDExtensionInt p_index, GDExtensionConstTypePtr p_value);
 * ctypedef void (*GDExtensionPtrIndexedGetter)(GDExtensionConstTypePtr p_base, GDExtensionInt p_index, GDExtensionTypePtr r_value);
 */
typedef void (*__pyx_t_8py4godot_14godot_bindings_15binding4_godot4_GDExtensionPtrGetter)(GDExtensionConstTypePtr, GDExtensionTypePtr);

/* "py4godot/godot_bindings/binding4_godot4.pxd":37
 * ctypedef void (*GDExtensionPtrSetter)(GDExtensionTypePtr p_base, GDExtensionConstTypePtr p_value);
 * ctypedef void (*GDExtensionPtrGetter)(GDExtensionConstTypePtr p_base, GDExtensionTypePtr r_value);
 * ctypedef void (*GDExtensionPtrIndexedSetter)(GDExtensionTypePtr p_base, GDExtensionInt p_index, GDExtensionConstTypePtr p_value);             # <<<<<<<<<<<<<<
 * ctypedef void (*GDExtensionPtrIndexedGetter)(GDExtensionConstTypePtr p_base, GDExtensionInt p_index, GDExtensionTypePtr r_value);
 * 
 */
typedef void (*__pyx_t_8py4godot_14godot_bindings_15binding4_godot4_GDExtensionPtrIndexedSetter)(GDExtensionTypePtr, GDExtensionInt, GDExtensionConstTypePtr);

/* "py4godot/godot_bindings/binding4_godot4.pxd":38
 * ctypedef void (*GDExtensionPtrGetter)(GDExtensionConstTypePtr p_base, GDExtensionTypePtr r_value);
 * ctypedef void (*GDExtensionPtrIndexedSetter)(GDExtensionTypePtr p_base, GDExtensionInt p_index, GDExtensionConstTypePtr p_value);
 * ctypedef void (*GDExtensionPtrIndexedGetter)(GDExtensionConstTypePtr p_base, GDExtensionInt p_index, GDExtensionTypePtr r_value);             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "binding4.h":
 */
typedef void (*__pyx_t_8py4godot_14godot_bindings_15binding4_godot4_GDExtensionPtrIndexedGetter)(GDExtensionConstTypePtr, GDExtensionInt, GDExtensionTypePtr);
struct __pyx_t_8py4godot_7classes_10cpp_bridge_Error;
struct __pyx_t_8py4godot_7classes_10cpp_bridge_Error {

  /* "py4godot/classes/cpp_bridge.pxd":7
 * from libcpp.memory cimport shared_ptr
 * 
 * cdef cppclass Error:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
};

/* "py4godot/classes/core.pxd":49
 * 
 * 
 * cpdef enum Vector2__Axis:             # <<<<<<<<<<<<<<
 *  Vector2__AXIS_X = 0
 *  Vector2__AXIS_Y = 1
 */
enum __pyx_t_8py4godot_7classes_4core_Vector2__Axis {
  __pyx_e_8py4godot_7classes_4core_Vector2__AXIS_X = 0,
  __pyx_e_8py4godot_7classes_4core_Vector2__AXIS_Y = 1
};

/* "py4godot/classes/core.pxd":64
 * 
 * 
 * cpdef enum Vector2i__Axis:             # <<<<<<<<<<<<<<
 *  Vector2i__AXIS_X = 0
 *  Vector2i__AXIS_Y = 1
 */
enum __pyx_t_8py4godot_7classes_4core_Vector2i__Axis {
  __pyx_e_8py4godot_7classes_4core_Vector2i__AXIS_X = 0,
  __pyx_e_8py4godot_7classes_4core_Vector2i__AXIS_Y = 1
};

/* "py4godot/classes/core.pxd":101
 * 
 * 
 * cpdef enum Vector3__Axis:             # <<<<<<<<<<<<<<
 *  Vector3__AXIS_X = 0
 *  Vector3__AXIS_Y = 1
 */
enum __pyx_t_8py4godot_7classes_4core_Vector3__Axis {
  __pyx_e_8py4godot_7classes_4core_Vector3__AXIS_X = 0,
  __pyx_e_8py4godot_7classes_4core_Vector3__AXIS_Y = 1,
  __pyx_e_8py4godot_7classes_4core_Vector3__AXIS_Z = 2
};

/* "py4godot/classes/core.pxd":117
 * 
 * 
 * cpdef enum Vector3i__Axis:             # <<<<<<<<<<<<<<
 *  Vector3i__AXIS_X = 0
 *  Vector3i__AXIS_Y = 1
 */
enum __pyx_t_8py4godot_7classes_4core_Vector3i__Axis {
  __pyx_e_8py4godot_7classes_4core_Vector3i__AXIS_X = 0,
  __pyx_e_8py4godot_7classes_4core_Vector3i__AXIS_Y = 1,
  __pyx_e_8py4godot_7classes_4core_Vector3i__AXIS_Z = 2
};

/* "py4godot/classes/core.pxd":144
 * 
 * 
 * cpdef enum Vector4__Axis:             # <<<<<<<<<<<<<<
 *  Vector4__AXIS_X = 0
 *  Vector4__AXIS_Y = 1
 */
enum __pyx_t_8py4godot_7classes_4core_Vector4__Axis {
  __pyx_e_8py4godot_7classes_4core_Vector4__AXIS_X = 0,
  __pyx_e_8py4godot_7classes_4core_Vector4__AXIS_Y = 1,
  __pyx_e_8py4godot_7classes_4core_Vector4__AXIS_Z = 2,
  __pyx_e_8py4godot_7classes_4core_Vector4__AXIS_W = 3
};

/* "py4godot/classes/core.pxd":161
 * 
 * 
 * cpdef enum Vector4i__Axis:             # <<<<<<<<<<<<<<
 *  Vector4i__AXIS_X = 0
 *  Vector4i__AXIS_Y = 1
 */
enum __pyx_t_8py4godot_7classes_4core_Vector4i__Axis {
  __pyx_e_8py4godot_7classes_4core_Vector4i__AXIS_X = 0,
  __pyx_e_8py4godot_7classes_4core_Vector4i__AXIS_Y = 1,
  __pyx_e_8py4godot_7classes_4core_Vector4i__AXIS_Z = 2,
  __pyx_e_8py4godot_7classes_4core_Vector4i__AXIS_W = 3
};

/* "py4godot/classes/core.pxd":233
 * 
 * 
 * cpdef enum Projection__Planes:             # <<<<<<<<<<<<<<
 *  Projection__PLANE_NEAR = 0
 *  Projection__PLANE_FAR = 1
 */
enum __pyx_t_8py4godot_7classes_4core_Projection__Planes {
  __pyx_e_8py4godot_7classes_4core_Projection__PLANE_NEAR = 0,
  __pyx_e_8py4godot_7classes_4core_Projection__PLANE_FAR = 1,
  __pyx_e_8py4godot_7classes_4core_Projection__PLANE_LEFT = 2,
  __pyx_e_8py4godot_7classes_4core_Projection__PLANE_TOP = 3,
  __pyx_e_8py4godot_7classes_4core_Projection__PLANE_RIGHT = 4,
  __pyx_e_8py4godot_7classes_4core_Projection__PLANE_BOTTOM = 5
};

/* "py4godot/classes/Object/Object.pxd":6
 * from py4godot.classes.cpp_bridge cimport Object as CPPObject
 * from py4godot.classes.core cimport *
 * cpdef enum Object__ConnectFlags:             # <<<<<<<<<<<<<<
 *  Object__CONNECT_DEFERRED = 1
 *  Object__CONNECT_PERSIST = 2
 */
enum __pyx_t_8py4godot_7classes_6Object_6Object_Object__ConnectFlags {
  __pyx_e_8py4godot_7classes_6Object_6Object_Object__CONNECT_DEFERRED = 1,
  __pyx_e_8py4godot_7classes_6Object_6Object_Object__CONNECT_PERSIST = 2,
  __pyx_e_8py4godot_7classes_6Object_6Object_Object__CONNECT_ONE_SHOT = 4,
  __pyx_e_8py4godot_7classes_6Object_6Object_Object__CONNECT_REFERENCE_COUNTED = 8
};

/* "py4godot/core/variant4/Variant4.pxd":13
 *         void construct_inner();
 *         void switch_native_and_inner()
 * cdef class PyVariant:             # <<<<<<<<<<<<<<
 *     cdef Variant variant
 *     cdef object get_converted_value(self, bint should_return_pystring)
 */
struct __pyx_obj_8py4godot_4core_8variant4_8Variant4_PyVariant {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_4core_8variant4_8Variant4_PyVariant *__pyx_vtab;
  godot::Variant variant;
};


/* "py4godot/classes/core.pxd":39
 * 
 * 
 * cdef class String():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_String {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_String *__pyx_vtab;
  std::shared_ptr<godot::String>  String_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":54
 * 
 * 
 * cdef class Vector2():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Vector2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector2 *__pyx_vtab;
  std::shared_ptr<godot::Vector2>  Vector2_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":69
 * 
 * 
 * cdef class Vector2i():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Vector2i {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector2i *__pyx_vtab;
  std::shared_ptr<godot::Vector2i>  Vector2i_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":80
 * 
 * 
 * cdef class Rect2():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Rect2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Rect2 *__pyx_vtab;
  std::shared_ptr<godot::Rect2>  Rect2_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":91
 * 
 * 
 * cdef class Rect2i():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Rect2i {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Rect2i *__pyx_vtab;
  std::shared_ptr<godot::Rect2i>  Rect2i_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":107
 * 
 * 
 * cdef class Vector3():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Vector3 {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector3 *__pyx_vtab;
  std::shared_ptr<godot::Vector3>  Vector3_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":123
 * 
 * 
 * cdef class Vector3i():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Vector3i {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector3i *__pyx_vtab;
  std::shared_ptr<godot::Vector3i>  Vector3i_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":134
 * 
 * 
 * cdef class Transform2D():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Transform2D {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Transform2D *__pyx_vtab;
  std::shared_ptr<godot::Transform2D>  Transform2D_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":151
 * 
 * 
 * cdef class Vector4():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Vector4 {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector4 *__pyx_vtab;
  std::shared_ptr<godot::Vector4>  Vector4_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":168
 * 
 * 
 * cdef class Vector4i():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Vector4i {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector4i *__pyx_vtab;
  std::shared_ptr<godot::Vector4i>  Vector4i_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":179
 * 
 * 
 * cdef class Plane():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Plane {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Plane *__pyx_vtab;
  std::shared_ptr<godot::Plane>  Plane_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":190
 * 
 * 
 * cdef class Quaternion():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Quaternion {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Quaternion *__pyx_vtab;
  std::shared_ptr<godot::Quaternion>  Quaternion_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":201
 * 
 * 
 * cdef class AABB():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_AABB {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_AABB *__pyx_vtab;
  std::shared_ptr<godot::AABB>  AABB_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":212
 * 
 * 
 * cdef class Basis():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Basis {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Basis *__pyx_vtab;
  std::shared_ptr<godot::Basis>  Basis_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":223
 * 
 * 
 * cdef class Transform3D():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Transform3D {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Transform3D *__pyx_vtab;
  std::shared_ptr<godot::Transform3D>  Transform3D_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":242
 * 
 * 
 * cdef class Projection():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Projection {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Projection *__pyx_vtab;
  std::shared_ptr<godot::Projection>  Projection_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":253
 * 
 * 
 * cdef class Color():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Color {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Color *__pyx_vtab;
  std::shared_ptr<godot::Color>  Color_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":264
 * 
 * 
 * cdef class StringName():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_StringName {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_StringName *__pyx_vtab;
  std::shared_ptr<godot::StringName>  StringName_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":275
 * 
 * 
 * cdef class NodePath():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_NodePath {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_NodePath *__pyx_vtab;
  std::shared_ptr<godot::NodePath>  NodePath_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":286
 * 
 * 
 * cdef class RID():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_RID {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_RID *__pyx_vtab;
  std::shared_ptr<godot::RID>  RID_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":297
 * 
 * 
 * cdef class Callable():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Callable {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Callable *__pyx_vtab;
  std::shared_ptr<godot::Callable>  Callable_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":308
 * 
 * 
 * cdef class Signal():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Signal {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Signal *__pyx_vtab;
  std::shared_ptr<godot::Signal>  Signal_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":319
 * 
 * 
 * cdef class Dictionary():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Dictionary {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Dictionary *__pyx_vtab;
  std::shared_ptr<godot::Dictionary>  Dictionary_internal_class_ptr;
};


/* "py4godot/classes/core.pxd":330
 * 
 * 
 * cdef class Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_Array {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_Array *__pyx_vtab;
  std::shared_ptr<godot::Array>  Array_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":341
 * 
 * 
 * cdef class PackedByteArray():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedByteArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedByteArray *__pyx_vtab;
  std::shared_ptr<godot::PackedByteArray>  PackedByteArray_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":352
 * 
 * 
 * cdef class PackedInt32Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedInt32Array {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedInt32Array *__pyx_vtab;
  std::shared_ptr<godot::PackedInt32Array>  PackedInt32Array_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":363
 * 
 * 
 * cdef class PackedInt64Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedInt64Array {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedInt64Array *__pyx_vtab;
  std::shared_ptr<godot::PackedInt64Array>  PackedInt64Array_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":374
 * 
 * 
 * cdef class PackedFloat32Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedFloat32Array {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedFloat32Array *__pyx_vtab;
  std::shared_ptr<godot::PackedFloat32Array>  PackedFloat32Array_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":385
 * 
 * 
 * cdef class PackedFloat64Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedFloat64Array {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedFloat64Array *__pyx_vtab;
  std::shared_ptr<godot::PackedFloat64Array>  PackedFloat64Array_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":396
 * 
 * 
 * cdef class PackedStringArray():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedStringArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedStringArray *__pyx_vtab;
  std::shared_ptr<godot::PackedStringArray>  PackedStringArray_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":407
 * 
 * 
 * cdef class PackedVector2Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedVector2Array {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector2Array *__pyx_vtab;
  std::shared_ptr<godot::PackedVector2Array>  PackedVector2Array_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":418
 * 
 * 
 * cdef class PackedVector3Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedVector3Array {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector3Array *__pyx_vtab;
  std::shared_ptr<godot::PackedVector3Array>  PackedVector3Array_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":429
 * 
 * 
 * cdef class PackedColorArray():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedColorArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedColorArray *__pyx_vtab;
  std::shared_ptr<godot::PackedColorArray>  PackedColorArray_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/core.pxd":440
 * 
 * 
 * cdef class PackedVector4Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_8py4godot_7classes_4core_PackedVector4Array {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector4Array *__pyx_vtab;
  std::shared_ptr<godot::PackedVector4Array>  PackedVector4Array_internal_class_ptr;
  int _index;
};


/* "py4godot/classes/Object/Object.pxd":13
 * 
 * 
 * cdef class Object():             # <<<<<<<<<<<<<<
 *  cdef bint already_deallocated
 * 
 */
struct __pyx_obj_8py4godot_7classes_6Object_6Object_Object {
  PyObject_HEAD
  struct __pyx_vtabstruct_8py4godot_7classes_6Object_6Object_Object *__pyx_vtab;
  int already_deallocated;
  std::shared_ptr<godot::Object>  Object_internal_class_ptr;
  PyObject *script_changed;
  PyObject *property_list_changed;
};



/* "py4godot/core/variant4/Variant4.pxd":13
 *         void construct_inner();
 *         void switch_native_and_inner()
 * cdef class PyVariant:             # <<<<<<<<<<<<<<
 *     cdef Variant variant
 *     cdef object get_converted_value(self, bint should_return_pystring)
 */

struct __pyx_vtabstruct_8py4godot_4core_8variant4_8Variant4_PyVariant {
  PyObject *(*get_converted_value)(struct __pyx_obj_8py4godot_4core_8variant4_8Variant4_PyVariant *, int);
  PyObject *(*get_converted_value_native_ptr)(struct __pyx_obj_8py4godot_4core_8variant4_8Variant4_PyVariant *, int);
  void (*init_from_py_object)(struct __pyx_obj_8py4godot_4core_8variant4_8Variant4_PyVariant *, PyObject *);
  void (*init_from_py_object_native_ptr)(struct __pyx_obj_8py4godot_4core_8variant4_8Variant4_PyVariant *, PyObject *);
};
static struct __pyx_vtabstruct_8py4godot_4core_8variant4_8Variant4_PyVariant *__pyx_vtabptr_8py4godot_4core_8variant4_8Variant4_PyVariant;


/* "py4godot/classes/core.pxd":39
 * 
 * 
 * cdef class String():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_String {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_String *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_String *__pyx_vtabptr_8py4godot_7classes_4core_String;


/* "py4godot/classes/core.pxd":54
 * 
 * 
 * cdef class Vector2():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector2 {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Vector2 *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector2 *__pyx_vtabptr_8py4godot_7classes_4core_Vector2;


/* "py4godot/classes/core.pxd":69
 * 
 * 
 * cdef class Vector2i():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector2i {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Vector2i *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector2i *__pyx_vtabptr_8py4godot_7classes_4core_Vector2i;


/* "py4godot/classes/core.pxd":80
 * 
 * 
 * cdef class Rect2():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Rect2 {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Rect2 *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Rect2 *__pyx_vtabptr_8py4godot_7classes_4core_Rect2;


/* "py4godot/classes/core.pxd":91
 * 
 * 
 * cdef class Rect2i():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Rect2i {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Rect2i *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Rect2i *__pyx_vtabptr_8py4godot_7classes_4core_Rect2i;


/* "py4godot/classes/core.pxd":107
 * 
 * 
 * cdef class Vector3():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector3 {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Vector3 *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector3 *__pyx_vtabptr_8py4godot_7classes_4core_Vector3;


/* "py4godot/classes/core.pxd":123
 * 
 * 
 * cdef class Vector3i():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector3i {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Vector3i *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector3i *__pyx_vtabptr_8py4godot_7classes_4core_Vector3i;


/* "py4godot/classes/core.pxd":134
 * 
 * 
 * cdef class Transform2D():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Transform2D {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Transform2D *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Transform2D *__pyx_vtabptr_8py4godot_7classes_4core_Transform2D;


/* "py4godot/classes/core.pxd":151
 * 
 * 
 * cdef class Vector4():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector4 {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Vector4 *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector4 *__pyx_vtabptr_8py4godot_7classes_4core_Vector4;


/* "py4godot/classes/core.pxd":168
 * 
 * 
 * cdef class Vector4i():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector4i {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Vector4i *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector4i *__pyx_vtabptr_8py4godot_7classes_4core_Vector4i;


/* "py4godot/classes/core.pxd":179
 * 
 * 
 * cdef class Plane():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Plane {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Plane *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Plane *__pyx_vtabptr_8py4godot_7classes_4core_Plane;


/* "py4godot/classes/core.pxd":190
 * 
 * 
 * cdef class Quaternion():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Quaternion {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Quaternion *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Quaternion *__pyx_vtabptr_8py4godot_7classes_4core_Quaternion;


/* "py4godot/classes/core.pxd":201
 * 
 * 
 * cdef class AABB():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_AABB {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_AABB *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_AABB *__pyx_vtabptr_8py4godot_7classes_4core_AABB;


/* "py4godot/classes/core.pxd":212
 * 
 * 
 * cdef class Basis():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Basis {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Basis *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Basis *__pyx_vtabptr_8py4godot_7classes_4core_Basis;


/* "py4godot/classes/core.pxd":223
 * 
 * 
 * cdef class Transform3D():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Transform3D {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Transform3D *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Transform3D *__pyx_vtabptr_8py4godot_7classes_4core_Transform3D;


/* "py4godot/classes/core.pxd":242
 * 
 * 
 * cdef class Projection():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Projection {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Projection *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Projection *__pyx_vtabptr_8py4godot_7classes_4core_Projection;


/* "py4godot/classes/core.pxd":253
 * 
 * 
 * cdef class Color():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Color {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Color *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Color *__pyx_vtabptr_8py4godot_7classes_4core_Color;


/* "py4godot/classes/core.pxd":264
 * 
 * 
 * cdef class StringName():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_StringName {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_StringName *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_StringName *__pyx_vtabptr_8py4godot_7classes_4core_StringName;


/* "py4godot/classes/core.pxd":275
 * 
 * 
 * cdef class NodePath():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_NodePath {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_NodePath *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_NodePath *__pyx_vtabptr_8py4godot_7classes_4core_NodePath;


/* "py4godot/classes/core.pxd":286
 * 
 * 
 * cdef class RID():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_RID {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_RID *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_RID *__pyx_vtabptr_8py4godot_7classes_4core_RID;


/* "py4godot/classes/core.pxd":297
 * 
 * 
 * cdef class Callable():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Callable {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Callable *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Callable *__pyx_vtabptr_8py4godot_7classes_4core_Callable;


/* "py4godot/classes/core.pxd":308
 * 
 * 
 * cdef class Signal():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Signal {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Signal *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Signal *__pyx_vtabptr_8py4godot_7classes_4core_Signal;


/* "py4godot/classes/core.pxd":319
 * 
 * 
 * cdef class Dictionary():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Dictionary {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Dictionary *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Dictionary *__pyx_vtabptr_8py4godot_7classes_4core_Dictionary;


/* "py4godot/classes/core.pxd":330
 * 
 * 
 * cdef class Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_Array {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_Array *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_Array *__pyx_vtabptr_8py4godot_7classes_4core_Array;


/* "py4godot/classes/core.pxd":341
 * 
 * 
 * cdef class PackedByteArray():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedByteArray {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedByteArray *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedByteArray *__pyx_vtabptr_8py4godot_7classes_4core_PackedByteArray;


/* "py4godot/classes/core.pxd":352
 * 
 * 
 * cdef class PackedInt32Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedInt32Array {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedInt32Array *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedInt32Array *__pyx_vtabptr_8py4godot_7classes_4core_PackedInt32Array;


/* "py4godot/classes/core.pxd":363
 * 
 * 
 * cdef class PackedInt64Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedInt64Array {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedInt64Array *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedInt64Array *__pyx_vtabptr_8py4godot_7classes_4core_PackedInt64Array;


/* "py4godot/classes/core.pxd":374
 * 
 * 
 * cdef class PackedFloat32Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedFloat32Array {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedFloat32Array *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedFloat32Array *__pyx_vtabptr_8py4godot_7classes_4core_PackedFloat32Array;


/* "py4godot/classes/core.pxd":385
 * 
 * 
 * cdef class PackedFloat64Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedFloat64Array {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedFloat64Array *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedFloat64Array *__pyx_vtabptr_8py4godot_7classes_4core_PackedFloat64Array;


/* "py4godot/classes/core.pxd":396
 * 
 * 
 * cdef class PackedStringArray():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedStringArray {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedStringArray *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedStringArray *__pyx_vtabptr_8py4godot_7classes_4core_PackedStringArray;


/* "py4godot/classes/core.pxd":407
 * 
 * 
 * cdef class PackedVector2Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector2Array {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedVector2Array *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector2Array *__pyx_vtabptr_8py4godot_7classes_4core_PackedVector2Array;


/* "py4godot/classes/core.pxd":418
 * 
 * 
 * cdef class PackedVector3Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector3Array {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedVector3Array *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector3Array *__pyx_vtabptr_8py4godot_7classes_4core_PackedVector3Array;


/* "py4godot/classes/core.pxd":429
 * 
 * 
 * cdef class PackedColorArray():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedColorArray {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedColorArray *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedColorArray *__pyx_vtabptr_8py4godot_7classes_4core_PackedColorArray;


/* "py4godot/classes/core.pxd":440
 * 
 * 
 * cdef class PackedVector4Array():             # <<<<<<<<<<<<<<
 * 
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector4Array {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_4core_PackedVector4Array *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector4Array *__pyx_vtabptr_8py4godot_7classes_4core_PackedVector4Array;


/* "py4godot/classes/Object/Object.pxd":13
 * 
 * 
 * cdef class Object():             # <<<<<<<<<<<<<<
 *  cdef bint already_deallocated
 * 
 */

struct __pyx_vtabstruct_8py4godot_7classes_6Object_6Object_Object {
  void (*set_gdowner)(struct __pyx_obj_8py4godot_7classes_6Object_6Object_Object *, void *);
};
static struct __pyx_vtabstruct_8py4godot_7classes_6Object_6Object_Object *__pyx_vtabptr_8py4godot_7classes_6Object_6Object_Object;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_11
#define __PYX_HAVE_RT_ImportType_proto_3_0_11
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_11 {
   __Pyx_ImportType_CheckSize_Error_3_0_11 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_11 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_11 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* IncludeStringH.proto */
#include <string.h>

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.memory" */

/* Module declarations from "libc.stdint" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython.version" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "py4godot.godot_bindings.binding4_godot4" */

/* Module declarations from "py4godot.core.variant4.Variant4" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "py4godot.classes.cpp_bridge" */

/* Module declarations from "py4godot.classes.core" */

/* Module declarations from "py4godot.classes.Object.Object" */

/* Module declarations from "py4godot.utils.instance_utils" */
static void __pyx_f_8py4godot_5utils_14instance_utils_set_owner(PyObject *, void *); /*proto*/
static void __pyx_f_8py4godot_5utils_14instance_utils_set_default_val(PyObject *, PyObject *, PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "py4godot.utils.instance_utils"
extern int __pyx_module_is_main_py4godot__utils__instance_utils;
int __pyx_module_is_main_py4godot__utils__instance_utils = 0;

/* Implementation of "py4godot.utils.instance_utils" */
/* #### Code section: global_var ### */
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "*";
static const char __pyx_k__2[] = "?";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_Exception[] = "Exception:";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_print_error[] = "print_error";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_py4godot_utils_print_tools[] = "py4godot.utils.print_tools";
static const char __pyx_k_Exception_when_setting_attribute[] = "Exception when setting attribute:";
/* #### Code section: decls ### */
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_8py4godot_4core_8variant4_8Variant4_PyVariant;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_String;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Vector2;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Vector2i;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Rect2;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Rect2i;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Vector3;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Vector3i;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Transform2D;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Vector4;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Vector4i;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Plane;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Quaternion;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_AABB;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Basis;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Transform3D;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Projection;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Color;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_StringName;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_NodePath;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_RID;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Callable;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Signal;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Dictionary;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_Array;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedByteArray;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedInt32Array;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedInt64Array;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedFloat32Array;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedFloat64Array;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedStringArray;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedVector2Array;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedVector3Array;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedColorArray;
  PyTypeObject *__pyx_ptype_8py4godot_7classes_4core_PackedVector4Array;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_8py4godot_7classes_6Object_6Object_Object;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyObject *__pyx_n_s_;
  PyObject *__pyx_kp_u_Exception;
  PyObject *__pyx_kp_u_Exception_when_setting_attribute;
  PyObject *__pyx_n_s__2;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_print_error;
  PyObject *__pyx_n_s_py4godot_utils_print_tools;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_test;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_4core_8variant4_8Variant4_PyVariant);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_String);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector2);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector2i);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Rect2);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Rect2i);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector3);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector3i);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Transform2D);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector4);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector4i);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Plane);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Quaternion);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_AABB);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Basis);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Transform3D);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Projection);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Color);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_StringName);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_NodePath);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_RID);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Callable);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Signal);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Dictionary);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedByteArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedInt32Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedInt64Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedFloat32Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedFloat64Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedStringArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedVector2Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedVector3Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedColorArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedVector4Array);
  Py_CLEAR(clear_module_state->__pyx_ptype_8py4godot_7classes_6Object_6Object_Object);
  Py_CLEAR(clear_module_state->__pyx_n_s_);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Exception);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Exception_when_setting_attribute);
  Py_CLEAR(clear_module_state->__pyx_n_s__2);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_print_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_py4godot_utils_print_tools);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_4core_8variant4_8Variant4_PyVariant);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_String);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector2);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector2i);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Rect2);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Rect2i);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector3);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector3i);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Transform2D);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector4);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Vector4i);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Plane);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Quaternion);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_AABB);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Basis);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Transform3D);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Projection);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Color);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_StringName);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_NodePath);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_RID);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Callable);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Signal);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Dictionary);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedByteArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedInt32Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedInt64Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedFloat32Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedFloat64Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedStringArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedVector2Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedVector3Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedColorArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_4core_PackedVector4Array);
  Py_VISIT(traverse_module_state->__pyx_ptype_8py4godot_7classes_6Object_6Object_Object);
  Py_VISIT(traverse_module_state->__pyx_n_s_);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Exception);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Exception_when_setting_attribute);
  Py_VISIT(traverse_module_state->__pyx_n_s__2);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_print_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_py4godot_utils_print_tools);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_8py4godot_4core_8variant4_8Variant4_PyVariant __pyx_mstate_global->__pyx_ptype_8py4godot_4core_8variant4_8Variant4_PyVariant
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_8py4godot_7classes_4core_String __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_String
#define __pyx_ptype_8py4godot_7classes_4core_Vector2 __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Vector2
#define __pyx_ptype_8py4godot_7classes_4core_Vector2i __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Vector2i
#define __pyx_ptype_8py4godot_7classes_4core_Rect2 __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Rect2
#define __pyx_ptype_8py4godot_7classes_4core_Rect2i __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Rect2i
#define __pyx_ptype_8py4godot_7classes_4core_Vector3 __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Vector3
#define __pyx_ptype_8py4godot_7classes_4core_Vector3i __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Vector3i
#define __pyx_ptype_8py4godot_7classes_4core_Transform2D __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Transform2D
#define __pyx_ptype_8py4godot_7classes_4core_Vector4 __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Vector4
#define __pyx_ptype_8py4godot_7classes_4core_Vector4i __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Vector4i
#define __pyx_ptype_8py4godot_7classes_4core_Plane __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Plane
#define __pyx_ptype_8py4godot_7classes_4core_Quaternion __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Quaternion
#define __pyx_ptype_8py4godot_7classes_4core_AABB __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_AABB
#define __pyx_ptype_8py4godot_7classes_4core_Basis __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Basis
#define __pyx_ptype_8py4godot_7classes_4core_Transform3D __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Transform3D
#define __pyx_ptype_8py4godot_7classes_4core_Projection __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Projection
#define __pyx_ptype_8py4godot_7classes_4core_Color __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Color
#define __pyx_ptype_8py4godot_7classes_4core_StringName __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_StringName
#define __pyx_ptype_8py4godot_7classes_4core_NodePath __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_NodePath
#define __pyx_ptype_8py4godot_7classes_4core_RID __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_RID
#define __pyx_ptype_8py4godot_7classes_4core_Callable __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Callable
#define __pyx_ptype_8py4godot_7classes_4core_Signal __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Signal
#define __pyx_ptype_8py4godot_7classes_4core_Dictionary __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Dictionary
#define __pyx_ptype_8py4godot_7classes_4core_Array __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_Array
#define __pyx_ptype_8py4godot_7classes_4core_PackedByteArray __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedByteArray
#define __pyx_ptype_8py4godot_7classes_4core_PackedInt32Array __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedInt32Array
#define __pyx_ptype_8py4godot_7classes_4core_PackedInt64Array __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedInt64Array
#define __pyx_ptype_8py4godot_7classes_4core_PackedFloat32Array __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedFloat32Array
#define __pyx_ptype_8py4godot_7classes_4core_PackedFloat64Array __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedFloat64Array
#define __pyx_ptype_8py4godot_7classes_4core_PackedStringArray __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedStringArray
#define __pyx_ptype_8py4godot_7classes_4core_PackedVector2Array __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedVector2Array
#define __pyx_ptype_8py4godot_7classes_4core_PackedVector3Array __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedVector3Array
#define __pyx_ptype_8py4godot_7classes_4core_PackedColorArray __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedColorArray
#define __pyx_ptype_8py4godot_7classes_4core_PackedVector4Array __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_4core_PackedVector4Array
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_8py4godot_7classes_6Object_6Object_Object __pyx_mstate_global->__pyx_ptype_8py4godot_7classes_6Object_6Object_Object
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_n_s_ __pyx_mstate_global->__pyx_n_s_
#define __pyx_kp_u_Exception __pyx_mstate_global->__pyx_kp_u_Exception
#define __pyx_kp_u_Exception_when_setting_attribute __pyx_mstate_global->__pyx_kp_u_Exception_when_setting_attribute
#define __pyx_n_s__2 __pyx_mstate_global->__pyx_n_s__2
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_print_error __pyx_mstate_global->__pyx_n_s_print_error
#define __pyx_n_s_py4godot_utils_print_tools __pyx_mstate_global->__pyx_n_s_py4godot_utils_print_tools
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
/* #### Code section: module_code ### */

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self) noexcept:
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self) noexcept:
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self) noexcept:             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py4godot/utils/instance_utils.pyx":5
 * from py4godot.utils.print_tools import *
 * 
 * cdef api void set_owner(object o, void* owner):             # <<<<<<<<<<<<<<
 *     try:
 *         (<Object>o).set_gdowner(owner)
 */

static void __pyx_f_8py4godot_5utils_14instance_utils_set_owner(PyObject *__pyx_v_o, void *__pyx_v_owner) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  unsigned int __pyx_t_11;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_owner", 1);

  /* "py4godot/utils/instance_utils.pyx":6
 * 
 * cdef api void set_owner(object o, void* owner):
 *     try:             # <<<<<<<<<<<<<<
 *         (<Object>o).set_gdowner(owner)
 *     except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "py4godot/utils/instance_utils.pyx":7
 * cdef api void set_owner(object o, void* owner):
 *     try:
 *         (<Object>o).set_gdowner(owner)             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         print_error("Exception:", e)
 */
      ((struct __pyx_vtabstruct_8py4godot_7classes_6Object_6Object_Object *)((struct __pyx_obj_8py4godot_7classes_6Object_6Object_Object *)__pyx_v_o)->__pyx_vtab)->set_gdowner(((struct __pyx_obj_8py4godot_7classes_6Object_6Object_Object *)__pyx_v_o), __pyx_v_owner); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 7, __pyx_L3_error)

      /* "py4godot/utils/instance_utils.pyx":6
 * 
 * cdef api void set_owner(object o, void* owner):
 *     try:             # <<<<<<<<<<<<<<
 *         (<Object>o).set_gdowner(owner)
 *     except Exception as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "py4godot/utils/instance_utils.pyx":8
 *     try:
 *         (<Object>o).set_gdowner(owner)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         print_error("Exception:", e)
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("py4godot.utils.instance_utils.set_owner", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 8, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_v_e = __pyx_t_6;
      /*try:*/ {

        /* "py4godot/utils/instance_utils.pyx":9
 *         (<Object>o).set_gdowner(owner)
 *     except Exception as e:
 *         print_error("Exception:", e)             # <<<<<<<<<<<<<<
 * 
 * cdef api void set_default_val(object o, str attribute_name, object val):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_print_error); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 9, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        __pyx_t_11 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_11 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_kp_u_Exception, __pyx_v_e};
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 9, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }

      /* "py4godot/utils/instance_utils.pyx":8
 *     try:
 *         (<Object>o).set_gdowner(owner)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         print_error("Exception:", e)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L15;
        }
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_4 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
          goto __pyx_L5_except_error;
        }
        __pyx_L15:;
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "py4godot/utils/instance_utils.pyx":6
 * 
 * cdef api void set_owner(object o, void* owner):
 *     try:             # <<<<<<<<<<<<<<
 *         (<Object>o).set_gdowner(owner)
 *     except Exception as e:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "py4godot/utils/instance_utils.pyx":5
 * from py4godot.utils.print_tools import *
 * 
 * cdef api void set_owner(object o, void* owner):             # <<<<<<<<<<<<<<
 *     try:
 *         (<Object>o).set_gdowner(owner)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("py4godot.utils.instance_utils.set_owner", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

/* "py4godot/utils/instance_utils.pyx":11
 *         print_error("Exception:", e)
 * 
 * cdef api void set_default_val(object o, str attribute_name, object val):             # <<<<<<<<<<<<<<
 *     try:
 *         setattr(o, attribute_name, val)
 */

static void __pyx_f_8py4godot_5utils_14instance_utils_set_default_val(PyObject *__pyx_v_o, PyObject *__pyx_v_attribute_name, PyObject *__pyx_v_val) {
  PyObject *__pyx_v_e = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  unsigned int __pyx_t_12;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_default_val", 1);

  /* "py4godot/utils/instance_utils.pyx":12
 * 
 * cdef api void set_default_val(object o, str attribute_name, object val):
 *     try:             # <<<<<<<<<<<<<<
 *         setattr(o, attribute_name, val)
 *     except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "py4godot/utils/instance_utils.pyx":13
 * cdef api void set_default_val(object o, str attribute_name, object val):
 *     try:
 *         setattr(o, attribute_name, val)             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         print_error("Exception when setting attribute:", e)
 */
      __pyx_t_4 = PyObject_SetAttr(__pyx_v_o, __pyx_v_attribute_name, __pyx_v_val); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L3_error)

      /* "py4godot/utils/instance_utils.pyx":12
 * 
 * cdef api void set_default_val(object o, str attribute_name, object val):
 *     try:             # <<<<<<<<<<<<<<
 *         setattr(o, attribute_name, val)
 *     except Exception as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "py4godot/utils/instance_utils.pyx":14
 *     try:
 *         setattr(o, attribute_name, val)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         print_error("Exception when setting attribute:", e)
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_5) {
      __Pyx_AddTraceback("py4godot.utils.instance_utils.set_default_val", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 14, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __pyx_v_e = __pyx_t_7;
      /*try:*/ {

        /* "py4godot/utils/instance_utils.pyx":15
 *         setattr(o, attribute_name, val)
 *     except Exception as e:
 *         print_error("Exception when setting attribute:", e)             # <<<<<<<<<<<<<<
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_print_error); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 15, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_12 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_kp_u_Exception_when_setting_attribute, __pyx_v_e};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_12, 2+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 15, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }

      /* "py4godot/utils/instance_utils.pyx":14
 *     try:
 *         setattr(o, attribute_name, val)
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         print_error("Exception when setting attribute:", e)
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L15;
        }
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __pyx_t_5 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          }
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
          goto __pyx_L5_except_error;
        }
        __pyx_L15:;
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "py4godot/utils/instance_utils.pyx":12
 * 
 * cdef api void set_default_val(object o, str attribute_name, object val):
 *     try:             # <<<<<<<<<<<<<<
 *         setattr(o, attribute_name, val)
 *     except Exception as e:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "py4godot/utils/instance_utils.pyx":11
 *         print_error("Exception:", e)
 * 
 * cdef api void set_default_val(object o, str attribute_name, object val):             # <<<<<<<<<<<<<<
 *     try:
 *         setattr(o, attribute_name, val)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("py4godot.utils.instance_utils.set_default_val", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_RefNannyFinishContext();
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "AABB",
    "Array",
    "Basis",
    "CPPAABB",
    "CPPArray",
    "CPPBasis",
    "CPPCallable",
    "CPPColor",
    "CPPDictionary",
    "CPPNodePath",
    "CPPObject",
    "CPPPackedByteArray",
    "CPPPackedColorArray",
    "CPPPackedFloat32Array",
    "CPPPackedFloat64Array",
    "CPPPackedInt32Array",
    "CPPPackedInt64Array",
    "CPPPackedStringArray",
    "CPPPackedVector2Array",
    "CPPPackedVector3Array",
    "CPPPackedVector4Array",
    "CPPPlane",
    "CPPProjection",
    "CPPQuaternion",
    "CPPRID",
    "CPPRect2",
    "CPPRect2i",
    "CPPSignal",
    "CPPString",
    "CPPStringName",
    "CPPTransform2D",
    "CPPTransform3D",
    "CPPVector2",
    "CPPVector2i",
    "CPPVector3",
    "CPPVector3i",
    "CPPVector4",
    "CPPVector4i",
    "Callable",
    "Color",
    "Dictionary",
    "NodePath",
    "Object",
    "Object__ConnectFlags",
    "PackedByteArray",
    "PackedColorArray",
    "PackedFloat32Array",
    "PackedFloat64Array",
    "PackedInt32Array",
    "PackedInt64Array",
    "PackedStringArray",
    "PackedVector2Array",
    "PackedVector3Array",
    "PackedVector4Array",
    "Plane",
    "Projection",
    "Projection__Planes",
    "Quaternion",
    "RID",
    "Rect2",
    "Rect2i",
    "Signal",
    "String",
    "StringName",
    "Transform2D",
    "Transform3D",
    "Vector2",
    "Vector2__Axis",
    "Vector2i",
    "Vector2i__Axis",
    "Vector3",
    "Vector3__Axis",
    "Vector3i",
    "Vector3i__Axis",
    "Vector4",
    "Vector4__Axis",
    "Vector4i",
    "Vector4i__Axis",
    "allocator",
    "shared_ptr",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;
    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }
    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            likely(PyString_Check(name)) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            likely(PyUnicode_Check(name)) &&
            likely(__Pyx_PyUnicode_GET_LENGTH(name)) &&
            __Pyx_PyUnicode_READ_CHAR(name, 0) == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}
static int __pyx_import_star(PyObject* m) {
    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;
    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;
    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;
bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}


#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 1},
    {&__pyx_kp_u_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 1, 0, 0},
    {&__pyx_kp_u_Exception_when_setting_attribute, __pyx_k_Exception_when_setting_attribute, sizeof(__pyx_k_Exception_when_setting_attribute), 0, 1, 0, 0},
    {&__pyx_n_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_print_error, __pyx_k_print_error, sizeof(__pyx_k_print_error), 0, 0, 1, 1},
    {&__pyx_n_s_py4godot_utils_print_tools, __pyx_k_py4godot_utils_print_tools, sizeof(__pyx_k_py4godot_utils_print_tools), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  return 0;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("set_owner", (void (*)(void))__pyx_f_8py4godot_5utils_14instance_utils_set_owner, "void (PyObject *, void *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("set_default_val", (void (*)(void))__pyx_f_8py4godot_5utils_14instance_utils_set_default_val, "void (PyObject *, PyObject *, PyObject *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(3, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_0_11(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(4, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("py4godot.core.variant4.Variant4"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8py4godot_4core_8variant4_8Variant4_PyVariant = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.core.variant4.Variant4", "PyVariant", sizeof(struct __pyx_obj_8py4godot_4core_8variant4_8Variant4_PyVariant), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_4core_8variant4_8Variant4_PyVariant),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_4core_8variant4_8Variant4_PyVariant) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_4core_8variant4_8Variant4_PyVariant = (struct __pyx_vtabstruct_8py4godot_4core_8variant4_8Variant4_PyVariant*)__Pyx_GetVtable(__pyx_ptype_8py4godot_4core_8variant4_8Variant4_PyVariant); if (unlikely(!__pyx_vtabptr_8py4godot_4core_8variant4_8Variant4_PyVariant)) __PYX_ERR(5, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("py4godot.classes.core"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8py4godot_7classes_4core_String = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "String", sizeof(struct __pyx_obj_8py4godot_7classes_4core_String), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_String),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_String) __PYX_ERR(6, 39, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_String = (struct __pyx_vtabstruct_8py4godot_7classes_4core_String*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_String); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_String)) __PYX_ERR(6, 39, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Vector2 = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Vector2", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Vector2), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Vector2),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Vector2) __PYX_ERR(6, 54, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Vector2 = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector2*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Vector2); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Vector2)) __PYX_ERR(6, 54, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Vector2i = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Vector2i", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Vector2i), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Vector2i),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Vector2i) __PYX_ERR(6, 69, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Vector2i = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector2i*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Vector2i); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Vector2i)) __PYX_ERR(6, 69, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Rect2 = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Rect2", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Rect2), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Rect2),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Rect2) __PYX_ERR(6, 80, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Rect2 = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Rect2*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Rect2); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Rect2)) __PYX_ERR(6, 80, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Rect2i = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Rect2i", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Rect2i), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Rect2i),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Rect2i) __PYX_ERR(6, 91, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Rect2i = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Rect2i*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Rect2i); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Rect2i)) __PYX_ERR(6, 91, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Vector3 = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Vector3", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Vector3), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Vector3),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Vector3) __PYX_ERR(6, 107, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Vector3 = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector3*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Vector3); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Vector3)) __PYX_ERR(6, 107, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Vector3i = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Vector3i", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Vector3i), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Vector3i),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Vector3i) __PYX_ERR(6, 123, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Vector3i = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector3i*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Vector3i); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Vector3i)) __PYX_ERR(6, 123, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Transform2D = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Transform2D", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Transform2D), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Transform2D),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Transform2D) __PYX_ERR(6, 134, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Transform2D = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Transform2D*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Transform2D); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Transform2D)) __PYX_ERR(6, 134, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Vector4 = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Vector4", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Vector4), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Vector4),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Vector4) __PYX_ERR(6, 151, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Vector4 = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector4*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Vector4); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Vector4)) __PYX_ERR(6, 151, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Vector4i = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Vector4i", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Vector4i), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Vector4i),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Vector4i) __PYX_ERR(6, 168, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Vector4i = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Vector4i*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Vector4i); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Vector4i)) __PYX_ERR(6, 168, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Plane = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Plane", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Plane), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Plane),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Plane) __PYX_ERR(6, 179, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Plane = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Plane*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Plane); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Plane)) __PYX_ERR(6, 179, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Quaternion = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Quaternion", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Quaternion), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Quaternion),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Quaternion) __PYX_ERR(6, 190, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Quaternion = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Quaternion*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Quaternion); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Quaternion)) __PYX_ERR(6, 190, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_AABB = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "AABB", sizeof(struct __pyx_obj_8py4godot_7classes_4core_AABB), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_AABB),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_AABB) __PYX_ERR(6, 201, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_AABB = (struct __pyx_vtabstruct_8py4godot_7classes_4core_AABB*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_AABB); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_AABB)) __PYX_ERR(6, 201, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Basis = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Basis", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Basis), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Basis),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Basis) __PYX_ERR(6, 212, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Basis = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Basis*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Basis); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Basis)) __PYX_ERR(6, 212, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Transform3D = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Transform3D", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Transform3D), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Transform3D),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Transform3D) __PYX_ERR(6, 223, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Transform3D = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Transform3D*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Transform3D); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Transform3D)) __PYX_ERR(6, 223, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Projection = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Projection", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Projection), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Projection),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Projection) __PYX_ERR(6, 242, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Projection = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Projection*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Projection); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Projection)) __PYX_ERR(6, 242, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Color = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Color", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Color), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Color),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Color) __PYX_ERR(6, 253, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Color = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Color*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Color); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Color)) __PYX_ERR(6, 253, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_StringName = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "StringName", sizeof(struct __pyx_obj_8py4godot_7classes_4core_StringName), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_StringName),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_StringName) __PYX_ERR(6, 264, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_StringName = (struct __pyx_vtabstruct_8py4godot_7classes_4core_StringName*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_StringName); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_StringName)) __PYX_ERR(6, 264, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_NodePath = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "NodePath", sizeof(struct __pyx_obj_8py4godot_7classes_4core_NodePath), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_NodePath),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_NodePath) __PYX_ERR(6, 275, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_NodePath = (struct __pyx_vtabstruct_8py4godot_7classes_4core_NodePath*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_NodePath); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_NodePath)) __PYX_ERR(6, 275, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_RID = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "RID", sizeof(struct __pyx_obj_8py4godot_7classes_4core_RID), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_RID),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_RID) __PYX_ERR(6, 286, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_RID = (struct __pyx_vtabstruct_8py4godot_7classes_4core_RID*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_RID); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_RID)) __PYX_ERR(6, 286, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Callable = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Callable", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Callable), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Callable),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Callable) __PYX_ERR(6, 297, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Callable = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Callable*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Callable); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Callable)) __PYX_ERR(6, 297, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Signal = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Signal", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Signal), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Signal),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Signal) __PYX_ERR(6, 308, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Signal = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Signal*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Signal); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Signal)) __PYX_ERR(6, 308, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Dictionary = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Dictionary", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Dictionary), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Dictionary),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Dictionary) __PYX_ERR(6, 319, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Dictionary = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Dictionary*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Dictionary); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Dictionary)) __PYX_ERR(6, 319, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "Array", sizeof(struct __pyx_obj_8py4godot_7classes_4core_Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_Array) __PYX_ERR(6, 330, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_Array = (struct __pyx_vtabstruct_8py4godot_7classes_4core_Array*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_Array); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_Array)) __PYX_ERR(6, 330, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedByteArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedByteArray", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedByteArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedByteArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedByteArray) __PYX_ERR(6, 341, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedByteArray = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedByteArray*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedByteArray); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedByteArray)) __PYX_ERR(6, 341, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedInt32Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedInt32Array", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedInt32Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedInt32Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedInt32Array) __PYX_ERR(6, 352, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedInt32Array = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedInt32Array*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedInt32Array); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedInt32Array)) __PYX_ERR(6, 352, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedInt64Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedInt64Array", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedInt64Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedInt64Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedInt64Array) __PYX_ERR(6, 363, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedInt64Array = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedInt64Array*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedInt64Array); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedInt64Array)) __PYX_ERR(6, 363, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedFloat32Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedFloat32Array", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedFloat32Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedFloat32Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedFloat32Array) __PYX_ERR(6, 374, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedFloat32Array = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedFloat32Array*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedFloat32Array); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedFloat32Array)) __PYX_ERR(6, 374, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedFloat64Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedFloat64Array", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedFloat64Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedFloat64Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedFloat64Array) __PYX_ERR(6, 385, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedFloat64Array = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedFloat64Array*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedFloat64Array); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedFloat64Array)) __PYX_ERR(6, 385, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedStringArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedStringArray", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedStringArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedStringArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedStringArray) __PYX_ERR(6, 396, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedStringArray = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedStringArray*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedStringArray); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedStringArray)) __PYX_ERR(6, 396, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedVector2Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedVector2Array", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedVector2Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedVector2Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedVector2Array) __PYX_ERR(6, 407, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedVector2Array = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector2Array*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedVector2Array); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedVector2Array)) __PYX_ERR(6, 407, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedVector3Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedVector3Array", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedVector3Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedVector3Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedVector3Array) __PYX_ERR(6, 418, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedVector3Array = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector3Array*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedVector3Array); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedVector3Array)) __PYX_ERR(6, 418, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedColorArray = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedColorArray", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedColorArray), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedColorArray),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedColorArray) __PYX_ERR(6, 429, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedColorArray = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedColorArray*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedColorArray); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedColorArray)) __PYX_ERR(6, 429, __pyx_L1_error)
  __pyx_ptype_8py4godot_7classes_4core_PackedVector4Array = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.core", "PackedVector4Array", sizeof(struct __pyx_obj_8py4godot_7classes_4core_PackedVector4Array), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_4core_PackedVector4Array),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_4core_PackedVector4Array) __PYX_ERR(6, 440, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_4core_PackedVector4Array = (struct __pyx_vtabstruct_8py4godot_7classes_4core_PackedVector4Array*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_4core_PackedVector4Array); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_4core_PackedVector4Array)) __PYX_ERR(6, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("py4godot.classes.Object.Object"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8py4godot_7classes_6Object_6Object_Object = __Pyx_ImportType_3_0_11(__pyx_t_1, "py4godot.classes.Object.Object", "Object", sizeof(struct __pyx_obj_8py4godot_7classes_6Object_6Object_Object), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_8py4godot_7classes_6Object_6Object_Object),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_8py4godot_7classes_6Object_6Object_Object) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_vtabptr_8py4godot_7classes_6Object_6Object_Object = (struct __pyx_vtabstruct_8py4godot_7classes_6Object_6Object_Object*)__Pyx_GetVtable(__pyx_ptype_8py4godot_7classes_6Object_6Object_Object); if (unlikely(!__pyx_vtabptr_8py4godot_7classes_6Object_6Object_Object)) __PYX_ERR(7, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_instance_utils(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_instance_utils},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "instance_utils",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initinstance_utils(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initinstance_utils(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_instance_utils(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_instance_utils(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_instance_utils(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'instance_utils' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("instance_utils", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "instance_utils" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_instance_utils(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_py4godot__utils__instance_utils) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "py4godot.utils.instance_utils")) {
      if (unlikely((PyDict_SetItemString(modules, "py4godot.utils.instance_utils", __pyx_m) < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely((__Pyx_modinit_function_export_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_init_code();
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "py4godot/utils/instance_utils.pyx":3
 * # distutils: language=c++
 * from py4godot.classes.Object.Object cimport *
 * from py4godot.utils.print_tools import *             # <<<<<<<<<<<<<<
 * 
 * cdef api void set_owner(object o, void* owner):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_);
  __Pyx_GIVEREF(__pyx_n_s_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_)) __PYX_ERR(1, 3, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_py4godot_utils_print_tools, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_import_star(__pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "py4godot/utils/instance_utils.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * from py4godot.classes.Object.Object cimport *
 * from py4godot.utils.print_tools import *
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init py4godot.utils.instance_utils", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init py4godot.utils.instance_utils");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_11
#define __PYX_HAVE_RT_ImportType_3_0_11
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_11 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_11 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__2);
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CStringEquals */
static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
    cobj = PyCapsule_New(tmp.p, sig, 0);
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
